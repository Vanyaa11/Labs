
// Без експорту свдж

'use client';
import React, { useState } from 'react';
import { PlusIcon, TrashIcon } from '@heroicons/react/20/solid';
// import VisaIcon from '../public/icons/visaIcon.svg';
// import MasterCardIcon from '../public/icons/masterCardIcon.svg';

interface Card {
    cardNumber: string;
    cardHolder: string;
    cardExpirationDate: string;
    cardCvc: string;
}

const CompanyPayment = (): JSX.Element => {
    const VisaIcon = () => (
        <svg
            width="30"
            height="24"
            viewBox="0 0 30 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M14.8256 9.94893C14.8092 11.2305 15.9748 11.9457 16.8528 12.3708C17.7549 12.8071 18.0579 13.0869 18.0545 13.477C18.0476 14.0741 17.3348 14.3376 16.6677 14.3479C15.5039 14.3658 14.8273 14.0356 14.2893 13.7858L13.8701 15.7355C14.4098 15.9827 15.4092 16.1983 16.4456 16.2077C18.8783 16.2077 20.4699 15.0143 20.4785 13.1639C20.488 10.8155 17.21 10.6855 17.2324 9.63582C17.2402 9.31758 17.5457 8.97794 18.2154 8.89154C18.5469 8.84791 19.4619 8.81455 20.4992 9.28934L20.9063 7.40298C20.3485 7.20109 19.6315 7.00774 18.7388 7.00774C16.4491 7.00774 14.8385 8.21741 14.8256 9.94893ZM24.8187 7.17029C24.3745 7.17029 24 7.42779 23.833 7.82303L20.358 16.0691H22.7889L23.2727 14.7405H26.2433L26.5239 16.0691H28.6665L26.7968 7.17029H24.8187ZM25.1587 9.57422L25.8602 12.9158H23.9389L25.1587 9.57422ZM11.8782 7.17029L9.96207 16.0691H12.2785L14.1938 7.17029H11.8782ZM8.45136 7.17029L6.04025 13.2272L5.06496 8.07711C4.95048 7.50222 4.49855 7.17029 3.99671 7.17029H0.0550914L0 7.42865C0.809155 7.60317 1.72849 7.88463 2.28543 8.18576C2.62631 8.36969 2.72358 8.53052 2.83548 8.96768L4.68277 16.0691H7.13089L10.884 7.17029H8.45136Z"
                fill="#232429"
            />
            <path d="M0 0.107758H29.4961V3.17442H0V0.107758Z" fill="#232429" />
            <path d="M0 20.0412H29.4961V23.1078H0V20.0412Z" fill="#F7B802" />
        </svg>
    );

    const MasterCardIcon = () => (
        <svg
            width="30"
            height="24"
            viewBox="0 0 30 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M5.44416 23.413V21.8611C5.44416 21.2659 5.08374 20.8781 4.49216 20.8781C4.18145 20.8781 3.84899 20.9817 3.6172 21.3152C3.43699 21.0305 3.18222 20.8781 2.79383 20.8781C2.64943 20.8718 2.50573 20.9016 2.3756 20.9648C2.24547 21.028 2.13295 21.1227 2.04813 21.2403V20.928H1.55908V23.4111H2.04813V21.9904C2.04813 21.5532 2.3054 21.344 2.66582 21.344C3.02624 21.344 3.23193 21.5769 3.23193 21.9904V23.413H3.72098V21.9904C3.72098 21.5532 3.97825 21.344 4.33867 21.344C4.69909 21.344 4.90477 21.5769 4.90477 21.9904V23.413H5.44416ZM13.4741 20.9555H12.573V20.2061H12.0852V20.9555H11.5707V21.3927H12.0852V22.5593C12.0852 23.1282 12.2909 23.4649 12.9086 23.4649C13.1426 23.46 13.3719 23.3978 13.5766 23.2837L13.4219 22.8466C13.283 22.9338 13.122 22.9787 12.9583 22.9759C12.701 22.9759 12.5724 22.8203 12.5724 22.5618V21.3727H13.4735V20.9586L13.4741 20.9555ZM18.0551 20.8781C17.9219 20.8751 17.7902 20.9069 17.6729 20.9704C17.5556 21.0339 17.4567 21.1269 17.3859 21.2403V20.928H16.8968V23.4111H17.3859V22.0166C17.3859 21.6025 17.5916 21.344 17.9265 21.344C18.0395 21.3486 18.1517 21.366 18.2608 21.3958L18.4156 20.9299C18.2976 20.9 18.1768 20.8826 18.0551 20.8781ZM11.132 21.1366C10.8747 20.9555 10.5143 20.8781 10.1284 20.8781C9.5107 20.8781 9.1248 21.1629 9.1248 21.6544C9.1248 22.0684 9.40816 22.3007 9.94817 22.3788L10.2054 22.4044C10.4888 22.4563 10.669 22.5599 10.669 22.6892C10.669 22.8703 10.4633 23.0015 10.0768 23.0015C9.78167 23.0076 9.49261 22.9168 9.25343 22.7429L8.99617 23.1307C9.35659 23.3893 9.79406 23.443 10.0526 23.443C10.7734 23.443 11.1593 23.107 11.1593 22.6411C11.1593 22.2039 10.8486 21.9947 10.3098 21.9167L10.0526 21.8911C9.82078 21.8655 9.61758 21.7874 9.61758 21.6325C9.61758 21.4514 9.82327 21.3202 10.1066 21.3202C10.4173 21.3202 10.7243 21.4495 10.879 21.527L11.132 21.1366ZM18.5958 22.1715C18.5958 22.9209 19.0848 23.4649 19.8827 23.4649C20.2431 23.4649 20.5004 23.3874 20.7577 23.1801L20.5004 22.7922C20.3183 22.9405 20.0916 23.0226 19.8572 23.0252C19.4223 23.0252 19.0848 22.6892 19.0848 22.1977C19.0848 21.7062 19.4179 21.3727 19.8572 21.3727C20.0916 21.3753 20.3183 21.4574 20.5004 21.6057L20.7577 21.2178C20.5004 21.0111 20.2431 20.933 19.8827 20.933C19.1103 20.8812 18.5958 21.4245 18.5958 22.1746V22.1715ZM15.1469 20.8781C14.4261 20.8781 13.937 21.3952 13.937 22.1715C13.937 22.9478 14.4516 23.4649 15.1979 23.4649C15.561 23.4726 15.9155 23.3539 16.2015 23.1289L15.9442 22.7666C15.7374 22.9277 15.4849 23.0183 15.2234 23.0252C14.889 23.0252 14.5286 22.8185 14.4777 22.3788H16.3052V22.1721C16.3052 21.3958 15.8417 20.8787 15.1469 20.8787V20.8781ZM15.1214 21.344C15.4819 21.344 15.7391 21.5769 15.7646 21.9648H14.4267C14.5038 21.6025 14.7374 21.344 15.1214 21.344ZM8.45553 22.1715V20.9299H7.96648V21.2422C7.78627 21.0092 7.53149 20.88 7.16859 20.88C6.47385 20.88 5.95869 21.4233 5.95869 22.1733C5.95869 22.9234 6.47322 23.4667 7.16859 23.4667C7.52901 23.4667 7.78627 23.3375 7.96648 23.1045V23.4168H8.45553V22.1715ZM6.47385 22.1715C6.47385 21.7056 6.75721 21.344 7.24626 21.344C7.70984 21.344 7.99196 21.7062 7.99196 22.1715C7.99196 22.663 7.68125 22.999 7.24626 22.999C6.75721 23.0246 6.47385 22.6367 6.47385 22.1715ZM25.4941 20.8781C25.3609 20.8751 25.2292 20.9069 25.1119 20.9704C24.9946 21.0339 24.8957 21.1269 24.8248 21.2403V20.928H24.3358V23.4111H24.8242V22.0166C24.8242 21.6025 25.0299 21.344 25.3648 21.344C25.4779 21.3486 25.59 21.366 25.6992 21.3958L25.8539 20.9299C25.7359 20.9 25.6151 20.8826 25.4935 20.8781H25.4941ZM23.5895 22.1715V20.9299H23.1004V21.2422C22.9202 21.0092 22.6654 20.88 22.3025 20.88C21.6078 20.88 21.0926 21.4233 21.0926 22.1733C21.0926 22.9234 21.6071 23.4667 22.3025 23.4667C22.6629 23.4667 22.9202 23.3375 23.1004 23.1045V23.4168H23.5895V22.1715ZM21.6078 22.1715C21.6078 21.7056 21.8911 21.344 22.3802 21.344C22.8438 21.344 23.1259 21.7062 23.1259 22.1715C23.1259 22.663 22.8152 22.999 22.3802 22.999C21.8911 23.0246 21.6078 22.6367 21.6078 22.1715ZM28.557 22.1715V19.9469H28.068V21.2403C27.8878 21.0074 27.633 20.8781 27.2701 20.8781C26.5753 20.8781 26.0602 21.4214 26.0602 22.1715C26.0602 22.9215 26.5747 23.4649 27.2701 23.4649C27.6305 23.4649 27.8878 23.3356 28.068 23.1026V23.4149H28.557V22.1715ZM26.5753 22.1715C26.5753 21.7056 26.8587 21.344 27.3478 21.344C27.8113 21.344 28.0935 21.7062 28.0935 22.1715C28.0935 22.663 27.7828 22.999 27.3478 22.999C26.8581 23.0252 26.5747 22.6374 26.5747 22.1715H26.5753Z"
                fill="#232429"
            />
            <path
                d="M10.5649 2.0993H19.4959V16.7394H10.5649V2.0993Z"
                fill="#FF5F00"
            />
            <path
                d="M11.466 9.41941C11.4664 8.01103 11.7837 6.62096 12.3943 5.3533C13.0049 4.08564 13.893 2.97323 14.992 2.09937C13.6252 1.01939 11.9837 0.347685 10.255 0.161039C8.52631 -0.025607 6.78027 0.280338 5.21644 1.0439C3.65261 1.80746 2.33411 2.99783 1.41165 4.47893C0.489189 5.96003 0 7.6721 0 9.41941C0 11.1667 0.489189 12.8788 1.41165 14.3599C2.33411 15.841 3.65261 17.0314 5.21644 17.7949C6.78027 18.5585 8.52631 18.8644 10.255 18.6778C11.9837 18.4911 13.6252 17.8194 14.992 16.7395C13.893 15.8656 13.0049 14.7532 12.3943 13.4855C11.7837 12.2179 11.4664 10.8278 11.466 9.41941Z"
                fill="#EB001B"
            />
            <path
                d="M30 9.4194C30.0013 11.1654 29.5135 12.8766 28.5926 14.3572C27.6716 15.8377 26.3547 17.0279 24.7923 17.7915C23.2299 18.5552 21.4852 18.8615 19.7578 18.6755C18.0303 18.4894 16.3898 17.8185 15.0239 16.7394C16.1232 15.8658 17.0114 14.7535 17.6221 13.4857C18.2327 12.218 18.5499 10.8278 18.5499 9.4194C18.5499 8.01095 18.2327 6.62077 17.6221 5.35306C17.0114 4.08534 16.1232 2.97298 15.0239 2.09935C16.3898 1.02031 18.0303 0.349388 19.7578 0.163334C21.4852 -0.0227205 23.2299 0.2836 24.7923 1.04726C26.3547 1.81092 27.6716 3.00109 28.5926 4.48164C29.5135 5.96219 30.0013 7.67335 30 9.4194Z"
                fill="#F79E1B"
            />
        </svg>
    );

    const [isAddCard, setIsAddingCard] = useState(false);
    const [inputCardValues, setInputCardValues] = useState<Card>({
        cardNumber: '',
        cardHolder: '',
        cardExpirationDate: '',
        cardCvc: '',
    });
    const [cardList, setCardList] = useState<Card[]>([]);
    const [zipCode, setZipCode] = useState('');

    const handleCardChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
        const { name, value } = e.target;
        setInputCardValues((prevValues) => ({
            ...prevValues,
            [name]: value,
        }));
    };

    const handleZipCodeChange = (
        e: React.ChangeEvent<HTMLInputElement>,
    ): void => {
        setZipCode(e.target.value);
    };

    const handleAddCardClick = (): void => {
        setIsAddingCard(true);
    };

    const handleCardCancel = (): void => {
        setIsAddingCard(false);
    };

    const handleCardSaveClick = (): void => {
        setCardList((prevList) => [...prevList, inputCardValues]);
        setInputCardValues({
            cardNumber: '',
            cardHolder: '',
            cardExpirationDate: '',
            cardCvc: '',
        });
        setIsAddingCard(false);
    };

    const maskCardNumber = (cardNumber: string): string => {
        const lastFourDigits = cardNumber.slice(-4);
        const maskedDigits = '*'.repeat(cardNumber.length - 4);
        return maskedDigits + lastFourDigits;
    };

    const detectCardType = (cardNumber: string): React.ReactNode => {
        const re: { [key: string]: RegExp } = {
            visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
            mastercard: /^5[1-5][0-9]{14}$/,
        };

        for (const key in re) {
            if (re[key].test(cardNumber)) {
                return key === 'visa' ? { VisaIcon } : { MasterCardIcon };
            }
        }

        return null;
    };

    const handleDeleteCard = (index: number): void => {
        setCardList((prevList) => {
            const updatedList = [...prevList];
            updatedList.splice(index, 1);
            return updatedList;
        });
    };

    return (
        <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
            <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
                <div className="py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
                    <div className="text-base font-semibold text-[#232429s]">
                        Credit Cards
                    </div>
                </div>
                {cardList.length > 0 && (
                    <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
                        {cardList.map((card, index) => (
                            <div
                                key={index}
                                className="flex items-center justify-between border-b border-gray-200 py-3"
                            >
                                <div className="flex items-center">
                                    <div className="mr-2">
                                        {detectCardType(card.cardNumber)}
                                    </div>
                                    <div className="text-gray-900">
                                        {maskCardNumber(card.cardNumber)}
                                    </div>
                                </div>
                                <button
                                    className="flex items-center text-[#ff5757] hover:text-[#F8485E]"
                                    onClick={() => handleDeleteCard(index)}
                                >
                                    <TrashIcon
                                        className="h-4 w-4"
                                        aria-hidden="true"
                                    />
                                </button>
                            </div>
                        ))}
                    </div>
                )}
                <div className="flex flex-row">
                    <button
                        onClick={handleAddCardClick}
                        type="button"
                        className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                    >
                        <PlusIcon className="h-5 w-5" aria-hidden="true" />
                    </button>
                    <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                        Add New Card
                    </div>
                </div>
            </div>
            {isAddCard && (
                <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
                    <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
                        <fieldset>
                            <legend className="block text-sm font-medium leading-6 text-gray-900">
                                Card Details
                            </legend>
                            <div className="mt-2 -space-y-px rounded-md bg-white shadow-sm">
                                <div>
                                    <label
                                        htmlFor="cardNumber"
                                        className="sr-only"
                                    >
                                        Card number
                                    </label>
                                    <input
                                        pattern="[0-9\s]{13,19}"
                                        type="numeric"
                                        name="cardNumber"
                                        id="cardNumber"
                                        className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                        placeholder="Card number"
                                        value={inputCardValues.cardNumber}
                                        onChange={handleCardChange}
                                    />
                                </div>
                                <div>
                                    <label
                                        htmlFor="cardHolder"
                                        className="sr-only"
                                    >
                                        Cardholder Name
                                    </label>
                                    <input
                                        type="text"
                                        name="cardHolder"
                                        id="cardHolder"
                                        className="relative block w-full rounded-none  border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                        placeholder="Cardholder Name"
                                        value={inputCardValues.cardHolder}
                                        onChange={handleCardChange}
                                    />
                                </div>
                                <div className="flex -space-x-px">
                                    <div className="w-1/2 min-w-0 flex-1">
                                        <label
                                            htmlFor="cardExpirationDate"
                                            className="sr-only"
                                        >
                                            Expiration date
                                        </label>
                                        <input
                                            type="text"
                                            name="cardExpirationDate"
                                            id="cardExpirationDate"
                                            className="relative px-1.5 block w-full rounded-none rounded-bl-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                            placeholder="MM / YY"
                                            value={
                                                inputCardValues.cardExpirationDate
                                            }
                                            onChange={handleCardChange}
                                        />
                                    </div>
                                    <div className="min-w-0 flex-1">
                                        <label
                                            htmlFor="cardCvc"
                                            className="sr-only"
                                        >
                                            CVC
                                        </label>
                                        <input
                                            type="text"
                                            name="cardCvc"
                                            id="cardCvc"
                                            className="relative px-1.5 block w-full rounded-none rounded-br-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                            placeholder="CVC"
                                            value={inputCardValues.cardCvc}
                                            onChange={handleCardChange}
                                        />
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                        <fieldset className="mt-6 bg-white">
                            <legend className="block text-sm font-medium leading-6 text-gray-900">
                                Billing address
                            </legend>
                            <div className="mt-2 -space-y-px rounded-md shadow-sm">
                                <div>
                                    <label
                                        htmlFor="country"
                                        className="sr-only"
                                    >
                                        Country
                                    </label>
                                    <select
                                        id="country"
                                        name="country"
                                        autoComplete="country-name"
                                        className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900   focus:z-10   sm:text-sm sm:leading-6"
                                    >
                                        <option>United States</option>
                                        <option>Canada</option>
                                        <option>Mexico</option>
                                    </select>
                                </div>
                                <div>
                                    <label
                                        htmlFor="postal-code"
                                        className="sr-only"
                                    >
                                        ZIP / Postal code
                                    </label>
                                    <input
                                        type="text"
                                        name="postal-code"
                                        id="postal-code"
                                        autoComplete="postal-code"
                                        className="relative px-2.5 block w-full rounded-none rounded-b-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                        placeholder="ZIP / Postal code"
                                        value={zipCode}
                                        onChange={handleZipCodeChange}
                                    />
                                </div>
                            </div>
                        </fieldset>
                        <div className="flex justify-end gap-x-2 mt-3">
                            <button
                                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                onClick={handleCardCancel}
                            >
                                Cancel
                            </button>

                            <button
                                className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF] md:text-sm sm:text-xs font-normal hover:bg-[#22C55E]"
                                onClick={handleCardSaveClick}
                            >
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CompanyPayment;



export default CompanyInvoicing;
function detectCardType(cardNumber: string): string | null {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  }

// з Текстом


import React, { useState } from 'react';
import { PlusIcon, TrashIcon } from '@heroicons/react/20/solid';
import VisaIcon from '../public/icons/visaIcon.svg';
import MasterCardIcon from '../public/icons/masterCardIcon.svg';

interface Card {
  cardNumber: string;
  cardHolder: string;
  cardExpirationDate: string;
  cardCvc: string;
}

const CompanyPayment = (): JSX.Element => {
  const [isAddCard, setIsAddingCard] = useState(false);
  const [inputCardValues, setInputCardValues] = useState<Card>({
    cardNumber: "",
    cardHolder: "",
    cardExpirationDate: "",
    cardCvc: "",
  });
  const [cardList, setCardList] = useState<Card[]>([]);
  const [zipCode, setZipCode] = useState("");

  const handleCardChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ): void => {
    const { name, value } = e.target;
    setInputCardValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleZipCodeChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ): void => {
    setZipCode(e.target.value);
  };

  const handleAddCardClick = (): void => {
    setIsAddingCard(true);
  };

  const handleCardCancel = (): void => {
    setIsAddingCard(false);
  };

  const handleCardSaveClick = (): void => {
    setCardList((prevList) => [...prevList, inputCardValues]);
    setInputCardValues({
      cardNumber: "",
      cardHolder: "",
      cardExpirationDate: "",
      cardCvc: "",
    });
    setIsAddingCard(false);
  };

  const maskCardNumber = (cardNumber: string): string => {
    const lastFourDigits = cardNumber.slice(-4);
    const maskedDigits = "*".repeat(cardNumber.length - 4);
    return maskedDigits + lastFourDigits;
  };

  const detectCardType = (cardNumber: string): string | null => {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  };

  const handleDeleteCard = (index: number): void => {
    setCardList((prevList) => {
      const updatedList = [...prevList];
      updatedList.splice(index, 1);
      return updatedList;
    });
  };

  return (
    <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
      <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
          <div className="text-base font-semibold text-[#232429s]">
            Credit Cards
          </div>
        </div>
        {cardList.length > 0 && (
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            {cardList.map((card, index) => (
              <div
                key={index}
                className="flex items-center justify-between border-b border-gray-200 py-3"
              >
                <div className="flex flex-col">
                  <div className="text-gray-900">
                    {maskCardNumber(card.cardNumber)}
                  </div>
                  <div className="text-gray-500 text-xs">
                    {detectCardType(card.cardNumber)}
                  </div>
                </div>
                <button
                  className="flex items-center text-[#ff5757] hover:text-[#F8485E]"
                  onClick={() => handleDeleteCard(index)}
                >
                  <TrashIcon className="h-4 w-4" aria-hidden="true" />
                </button>
              </div>
            ))}
          </div>
        )}
        <div className="flex flex-row">
          <button
            onClick={handleAddCardClick}
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
            Add New Card
          </div>
        </div>
      </div>
      {isAddCard && (
        <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            <fieldset>
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Card Details
              </legend>
              <div className="mt-2 -space-y-px rounded-md bg-white shadow-sm">
                <div>
                  <label htmlFor="cardNumber" className="sr-only">
                    Card number
                  </label>
                  <input
                    pattern="[0-9\s]{13,19}"
                    type="numeric"
                    name="cardNumber"
                    id="cardNumber"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Card number"
                    value={inputCardValues.cardNumber}
                    onChange={handleCardChange}
                  />
                </div>
                <div>
                  <label htmlFor="cardHolder" className="sr-only">
                    Cardholder Name
                  </label>
                  <input
                    type="text"
                    name="cardHolder"
                    id="cardHolder"
                    className="relative block w-full rounded-none  border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Cardholder Name"
                    value={inputCardValues.cardHolder}
                    onChange={handleCardChange}
                  />
                </div>
                <div className="flex -space-x-px">
                  <div className="w-1/2 min-w-0 flex-1">
                    <label htmlFor="cardExpirationDate" className="sr-only">
                      Expiration date
                    </label>
                    <input
                      type="text"
                      name="cardExpirationDate"
                      id="cardExpirationDate"
                      className="relative px-1.5 block w-full rounded-none rounded-bl-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="MM / YY"
                      value={inputCardValues.cardExpirationDate}
                      onChange={handleCardChange}
                    />
                  </div>
                  <div className="min-w-0 flex-1">
                    <label htmlFor="cardCvc" className="sr-only">
                      CVC
                    </label>
                    <input
                      type="text"
                      name="cardCvc"
                      id="cardCvc"
                      className="relative px-1.5 block w-full rounded-none rounded-br-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="CVC"
                      value={inputCardValues.cardCvc}
                      onChange={handleCardChange}
                    />
                  </div>
                </div>
              </div>
            </fieldset>
            <fieldset className="mt-6 bg-white">
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Billing address
              </legend>
              <div className="mt-2 -space-y-px rounded-md shadow-sm">
                <div>
                  <label htmlFor="country" className="sr-only">
                    Country
                  </label>
                  <select
                    id="country"
                    name="country"
                    autoComplete="country-name"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900   focus:z-10   sm:text-sm sm:leading-6"
                  >
                    <option>United States</option>
                    <option>Canada</option>
                    <option>Mexico</option>
                  </select>
                </div>
                <div>
                  <label htmlFor="postal-code" className="sr-only">
                    ZIP / Postal code
                  </label>
                  <input
                    type="text"
                    name="postal-code"
                    id="postal-code"
                    autoComplete="postal-code"
                    className="relative px-2.5 block w-full rounded-none rounded-b-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="ZIP / Postal code"
                    value={zipCode}
                    onChange={handleZipCodeChange}
                  />
                </div>
              </div>
            </fieldset>
            <div className="flex justify-end gap-x-2 mt-3">
              <button
                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={handleCardCancel}
              >
                Cancel
              </button>

              <button
                className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF] md:text-sm sm:text-xs font-normal hover:bg-[#22C55E]"
                onClick={handleCardSaveClick}
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyPayment;




змінений CompanyInvoicing 


import React, { useState } from 'react';
import { Tooltip as ReactTooltip } from 'react-tooltip';
import 'react-tooltip/dist/react-tooltip.css';
import Modal from './Modal';
import {
    ArrowLongLeftIcon,
    ArrowLongRightIcon,
    PlusIcon,
    QuestionMarkCircleIcon,
    TrashIcon,
} from '@heroicons/react/20/solid';
import PenBorderIcon from '../public/icons/penBorderIcon.svg';
import Image from 'next/image';
import DownloadIcon from '../public/icons/downloadIcon.svg';

import { dataInvoicing } from "@/public/Data";

const CompanyInvoicing = () => {

    const [isOpen, setIsOpen] = useState(false);
    const [isAdd, setIsAdding] = useState(false);
    const [activeEmailIndex, setActiveEmailIndex] = useState(-1);
    const [emailInput, setEmailInput] = useState('');
    const [emailList, setEmailList] = useState<string[]>([]);
    const [isAddressEditing, setIsAddressEditing] = useState(false);
    const [isAddAddress, setIsAddingAddress] = useState(false);
    const [inputAddressValues, setInputAddressValues] = useState({
        registrationNumber: '',
        vatId: '',
        legalCountry: '',
        legalCity: '',
        legalStreet: '',
        zipCode: '',
    });
    const handleConfirm = () => {
        handleCloseModal();
    };

    const handleOpenModal = (index: number) => {
        setIsOpen(true);
        setActiveEmailIndex(index);
    };

    const handleCloseModal = () => {
        setIsOpen(false);
    };

    const handleEditClick = () => {
        setIsAddressEditing(true);
    };

    const handleAddClick = () => {
        setIsAdding(true);
    };

    const handleSaveClick = () => {
        if (emailInput) {
            setEmailList((prevList) => [...prevList, emailInput]);
            setEmailInput('');
        }
        setIsAdding(false);
    };

    const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setEmailInput(e.target.value);
    };

    const handleEmailDelete = (index: number) => {
        setEmailList((prevList) => prevList.filter((_, i) => i !== index));
        setIsOpen(false);
    };

    const handleAddAddressClick = () => {
        setIsAddingAddress(true);
    };

    const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setInputAddressValues((prevValues) => ({
            ...prevValues,
            [name]: value,
        }));
    };

    const handleAddressSaveClick = () => {
        setIsAddressEditing(false);
    };
    const handleAddressCancel = () => {
        setInputAddressValues((prevValues) => ({
            ...prevValues,
        }));
        setIsAddressEditing(false);
    };

    return (
        <>
            <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
                <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
                    <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
                        <div className="text-base font-semibold">
                            Invoicing Email
                        </div>
                        <div className="flex items-center">
                            <QuestionMarkCircleIcon
                                className="h-5 w-5 text-gray-400"
                                aria-hidden="true"
                                id="email-tooltip"
                                data-tooltip-offset="13"
                            />
                            <ReactTooltip
                                style={{
                                    backgroundColor: 'white',
                                    color: '#4D5F7A',
                                    width: '266px',
                                    textAlign: 'center',
                                    border: '0.5px solid #F3F4F6',
                                    borderRadius: '4px',
                                    // boxShadow: "0px 2px 4px -2px #0000000D",
                                    boxShadow: '0px 4px 6px -1px #0000001A ',
                                }}
                                anchorSelect="#email-tooltip"
                                place="top"
                                content="If you wish to receive invoices on a 
                specific email address, type the email 
                address here. Otherwise, we will use the 
                Company specific email address if it 
                exists. If not, we will use the address 
                associated with this account."
                            />
                        </div>
                    </div>
                    <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
                        {emailList.map((email, index) => (
                            <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                <div className="flex justify-between">
                                    <label
                                        htmlFor="emailInput"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Email Address
                                    </label>
                                    <button
                                        onClick={() => handleOpenModal(index)}
                                        className="ml-2 text-red-500"
                                    >
                                        <TrashIcon
                                            className="h-5 w-5 text-[#EB001B]"
                                            aria-hidden="true"
                                        />
                                    </button>
                                </div>
                                <input
                                    type="text"
                                    name="emailInput"
                                    id="emailInput"
                                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                    placeholder="bluebridgellc@mail.com"
                                    value={email}
                                    onChange={handleEmailInputChange}
                                    disabled={!isAdd}
                                />
                            </div>
                        ))}
                        {isAdd && (
                            <>
                                <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="emailInput"
                                        className="block text-xs font-medium text-gray-900 px-3"
                                    >
                                        Email Address
                                    </label>
                                    <input
                                        type="text"
                                        name="emailInput"
                                        id="emailInput"
                                        className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="bluebridgellc@mail.com"
                                        value={emailInput}
                                        onChange={handleEmailInputChange}
                                        aria-invalid="true"
                                        aria-describedby="email-error"
                                    />
                                </div>
                                <div className="flex justify-end gap-x-2 mx-3">
                                    <button
                                        className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                        onClick={() => {
                                            setEmailInput('');
                                            setIsAdding(false);
                                        }}
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                                        onClick={handleSaveClick}
                                    >
                                        Add
                                    </button>
                                </div>
                            </>
                        )}
                        {!isAdd && (
                            <div className="flex -mx-3 flex-row">
                                <button
                                    onClick={handleAddClick}
                                    type="button"
                                    className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                >
                                    <PlusIcon
                                        className="h-5 w-5"
                                        aria-hidden="true"
                                    />
                                </button>
                                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                                    Add Email Address
                                </div>
                            </div>
                        )}
                    </div>
                </div>
                <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
                    <div className=" py-5 sm:p-6 px-[15px]  flex flex-row justify-between  text-sm md:text-base font-normal">
                        <div className="flex gap-[10px]">
                            <div className="text-base font-semibold">
                                Invoicing Address
                            </div>
                            <div className="flex mt-[2px]">
                                <QuestionMarkCircleIcon
                                    id="address-tooltip"
                                    data-tooltip-offset="13"
                                    className="h-5 w-5 text-gray-400 "
                                    aria-hidden="true"
                                />
                                <ReactTooltip
                                    style={{
                                        backgroundColor: 'white',
                                        color: '#4D5F7A',
                                        width: '266px',
                                        textAlign: 'center',
                                        border: '0.5px solid #F3F4F6',
                                        borderRadius: '4px',
                                        // boxShadow: "0px 2px 4px -2px #0000000D",
                                        boxShadow: '0px 4px 6px -1px #0000001A',
                                    }}
                                    anchorSelect="#address-tooltip"
                                    place="top"
                                    content='If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                   "Company Details" page.'
                                />
                            </div>
                        </div>
                        {isAddAddress && (
                            <div className="flex items-center -mt-[8px]">
                                <button
                                    className="flex self-end border-gradient items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-2 font-medium	rounded-[6px]
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                    onClick={handleEditClick}
                                >
                                    <Image
                                        src={PenBorderIcon}
                                        className="h-full w-full"
                                        alt="pen"
                                    />
                                </button>
                            </div>
                        )}
                    </div>

                    {!isAddAddress && (
                        <div className="flex flex-row">
                            <button
                                onClick={handleAddAddressClick}
                                type="button"
                                className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                            >
                                <PlusIcon
                                    className="h-5 w-5"
                                    aria-hidden="true"
                                />
                            </button>
                            <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                                Add invoicing Address
                            </div>
                        </div>
                    )}

                    {isAddAddress && (
                        <div className="flex flex-col px-3 ">
                            <div className="isolate -space-y-px rounded-md shadow-sm">
                                <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalCountry"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Legal Country
                                    </label>
                                    <input
                                        type="text"
                                        name="legalCountry"
                                        id="legalCountry"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="United States"
                                        value={inputAddressValues.legalCountry}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalCity"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Legal City
                                    </label>
                                    <input
                                        type="text"
                                        name="legalCity"
                                        id="legalCity"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="San Francisco"
                                        value={inputAddressValues.legalCity}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalStreet"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Street
                                    </label>
                                    <input
                                        type="text"
                                        name="legalStreet"
                                        id="legalStreet"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="Brooklin st. 21 AG 103"
                                        value={inputAddressValues.legalStreet}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="zipCode"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Zip Code
                                    </label>
                                    <input
                                        type="text"
                                        name="zipCode"
                                        id="zipCode"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="204873"
                                        value={inputAddressValues.zipCode}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                            </div>
                            {isAddressEditing && (
                                <div className="flex justify-end gap-x-2 mt-3">
                                    <button
                                        className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                        onClick={handleAddressCancel}
                                    >
                                        Cancel
                                    </button>

                                    <button
                                        className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                                        onClick={handleAddressSaveClick}
                                    >
                                        Save
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
                <table className="min-w-full ">
                    <thead className="divide-y divide-gray-300">
                        <tr>
                            <th
                                scope="col"
                                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
                            >
                                Invoice Number
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>

                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Data of Issue
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Value
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                State
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Actions
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y-4 divide-white">
                        {dataInvoicing.map((item, index) => (
                            <tr
                                key={index}
                                className={`bg-[#FAFAFD] space-y-1 ${
                                    item.state === 'Paid'
                                        ? 'text-[#22C55E]'
                                        : 'text-[#EB001B]'
                                }`}
                            >
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.number}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.date}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.value}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium  sm:pl-6">
                                    {item.state}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    <div className="flex gap-x-6">
                                        <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                                            {item.actions}
                                        </button>
                                        <button>
                                            <Image
                                                src={DownloadIcon}
                                                className="h-full w-full"
                                                alt="download"
                                            />
                                        </button>
                                        {item.state === 'Unpaid' && (
                                            <button className="text-sm font-normal px-2 py-1 rounded-md bg-[#22C55E] text-[#FFFFFF]">
                                                Pay Now
                                            </button>
                                        )}
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
                <nav className="flex items-center justify-between py-4 mx-6 sm:px-0">
                    <div className="-mt-px flex w-0 flex-1">
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            <ArrowLongLeftIcon
                                className="mr-3 h-5 w-5 text-gray-400"
                                aria-hidden="true"
                            />
                            Previous
                        </a>
                    </div>
                    <div className="hidden md:-mt-px md:flex">
                        <a
                            href="#"
                            className=" text-[#22C55E] inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium  hover:border-gray-300 hover:text-gray-700"
                        >
                            1
                        </a>
                        {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                            aria-current="page"
                        >
                            2
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            3
                        </a>
                        <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
                            ...
                        </span>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            8
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            9
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            10
                        </a>
                    </div>
                    <div className="-mt-px flex w-0 flex-1 justify-end">
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            Next
                            <ArrowLongRightIcon
                                className="ml-3 h-5 w-5 text-gray-400"
                                aria-hidden="true"
                            />
                        </a>
                    </div>
                </nav>
            </div>
            <Modal
                isOpen={isOpen}
                onConfirm={handleConfirm}
                onCancel={handleCloseModal}
                handleEmailDelete={handleEmailDelete}
                activeEmailIndex={activeEmailIndex}
            />
        </>
    );
};
export default CompanyInvoicing;



// Додати до Data 

interface MyData {
  number: string;
  date: string;
  value: string;
  state: string;
  actions: string;
}

export const dataInvoicing: MyData[] = [
  {
      number: '#236 322',
      date: '01 May 2023',
      value: '€ 250',
      state: 'Unpaid',
      actions: 'Resend',
  },
  {
      number: '#236 322',
      date: '08 May 2023',
      value: '€ 150',
      state: 'Paid',
      actions: 'Resend',
  },
  {
      number: '#236 322',
      date: '16 May 2023',
      value: '€ 50',
      state: 'Paid',
      actions: 'Resend',
  },
  {
      number: '#236 322',
      date: '28 March 2023',
      value: '€ 350',
      state: 'Paid',
      actions: 'Resend',
  },
  {
      number: '#236 322',
      date: '20 March 2023',
      value: '€ 408',
      state: 'Paid',
      actions: 'Resend',
  },
];



import Image from "next/image";
import React, { useState } from "react";
import { PlusIcon, TrashIcon } from "@heroicons/react/20/solid";
import VisaIcon from '../public/icons/visaIcon.svg';
import MasterCardIcon from '../public/icons/masterCardIcon.svg';

interface Card {
  cardNumber: string;
  cardHolder: string;
  cardExpirationDate: string;
  cardCvc: string;
}

const CompanyPayment = (): JSX.Element => {
  const [isAddCard, setIsAddingCard] = useState(false);
  const [inputCardValues, setInputCardValues] = useState<Card>({
    cardNumber: "",
    cardHolder: "",
    cardExpirationDate: "",
    cardCvc: "",
  });
  const [cardList, setCardList] = useState<Card[]>([]);
  const [zipCode, setZipCode] = useState("");

  const handleCardChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    const { name, value } = e.target;
    setInputCardValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleZipCodeChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ): void => {
    setZipCode(e.target.value);
  };

  const handleAddCardClick = (): void => {
    setIsAddingCard(true);
  };

  const handleCardCancel = (): void => {
    setIsAddingCard(false);
  };

  const handleCardSaveClick = (): void => {
    setCardList((prevList) => [...prevList, inputCardValues]);
    setInputCardValues({
      cardNumber: "",
      cardHolder: "",
      cardExpirationDate: "",
      cardCvc: "",
    });
    setIsAddingCard(false);
  };

  const maskCardNumber = (cardNumber: string): string => {
    const lastFourDigits = cardNumber.slice(-4);
    const maskedDigits = "*".repeat(cardNumber.length - 4);
    return maskedDigits + lastFourDigits;
  };

  const detectCardType = (cardNumber: string): string | null => {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  };

  const handleDeleteCard = (index: number): void => {
    setCardList((prevList) => {
      const updatedList = [...prevList];
      updatedList.splice(index, 1);
      return updatedList;
    });
  };

  return (
    <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
      <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
          <div className="text-base font-semibold text-[#232429s]">
            Credit Cards
          </div>
        </div>
        {cardList.length > 0 && (
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            {cardList.map((card, index) => (
              <div
                key={index}
                className="flex items-center justify-between py-3"
              >
                <div className="flex items-center  gap-x-2">
                  <div className="text-gray-500 text-xs">
                    {detectCardType(card.cardNumber)}
                  </div>
                  <div className="text-gray-900">
                    {maskCardNumber(card.cardNumber)}
                  </div>
                </div>
                <button
                  onClick={() => handleDeleteCard(index)}
                  className="bg-[#EB001B] flex items-center w-[36px] h-[36px] text-white text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  <TrashIcon
                    className="h-5 w-5 text-[#FFFFFF]"
                    aria-hidden="true"
                  />
                </button>
              </div>
            ))}
          </div>
        )}
        <div className="flex flex-row">
          <button
            onClick={handleAddCardClick}
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
            Add New Card
          </div>
        </div>
      </div>
      {isAddCard && (
        <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            <fieldset>
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Card Details
              </legend>
              <div className="mt-2 -space-y-px rounded-md bg-white shadow-sm">
                <div>
                  <label htmlFor="cardNumber" className="sr-only">
                    Card number
                  </label>
                  <input
                    pattern="[0-9\s]{13,19}"
                    type="numeric"
                    name="cardNumber"
                    id="cardNumber"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Card number"
                    value={inputCardValues.cardNumber}
                    onChange={handleCardChange}
                  />
                </div>
                <div>
                  <label htmlFor="cardHolder" className="sr-only">
                    Cardholder Name
                  </label>
                  <input
                    type="text"
                    name="cardHolder"
                    id="cardHolder"
                    className="relative block w-full rounded-none  border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Cardholder Name"
                    value={inputCardValues.cardHolder}
                    onChange={handleCardChange}
                  />
                </div>
                <div className="flex -space-x-px">
                  <div className="w-1/2 min-w-0 flex-1">
                    <label htmlFor="cardExpirationDate" className="sr-only">
                      Expiration date
                    </label>
                    <input
                      required
                      type="text"
                      name="cardExpirationDate"
                      id="cardExpirationDate"
                      className="relative px-1.5 block w-full rounded-none rounded-bl-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="MM / YY"
                      value={inputCardValues.cardExpirationDate}
                      onChange={handleCardChange}
                    />
                  </div>
                  <div className="min-w-0 flex-1">
                    <label htmlFor="cardCvc" className="sr-only">
                      CVC
                    </label>
                    <input
                      required
                      type="text"
                      name="cardCvc"
                      id="cardCvc"
                      className="relative px-1.5 block w-full rounded-none rounded-br-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="CVC"
                      value={inputCardValues.cardCvc}
                      onChange={handleCardChange}
                    />
                  </div>
                </div>
              </div>
            </fieldset>
            <fieldset className="mt-6 bg-white">
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Billing address
              </legend>
              <div className="mt-2 -space-y-px rounded-md shadow-sm">
                <div>
                  <label htmlFor="country" className="sr-only">
                    Country
                  </label>
                  <select
                    id="country"
                    name="country"
                    autoComplete="country-name"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900   focus:z-10   sm:text-sm sm:leading-6"
                  >
                    <option>United States</option>
                    <option>Canada</option>
                    <option>Mexico</option>
                  </select>
                </div>
                <div>
                  <label htmlFor="postal-code" className="sr-only">
                    ZIP / Postal code
                  </label>
                  <input
                    type="text"
                    name="postal-code"
                    id="postal-code"
                    autoComplete="postal-code"
                    className="relative px-2.5 block w-full rounded-none rounded-b-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="ZIP / Postal code"
                    value={zipCode}
                    onChange={handleZipCodeChange}
                  />
                </div>
              </div>
            </fieldset>
            <div className="flex justify-end gap-x-2 mt-3">
              <button
                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={handleCardCancel}
              >
                Cancel
              </button>

              <button
                className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF] md:text-sm sm:text-xs font-normal hover:bg-[#22C55E]"
                onClick={handleCardSaveClick}
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyPayment;


// <Image
//         src={VisaIcon}
//         className="w-4 h-4 text-gray-400"
//         alt={"pull right"}
//       />


// <Image
//         src={MasterCardIcon}
//         className="w-4 h-4 text-gray-400"
//         alt={"pull right"}
//       />


{detectCardType(card.cardNumber) ===
                                    'visa' ? (
                                        <div className="w-4 h-4">
                                            <Image
                                                src={VisaIcon}
                                                alt="Visa"
                                                width={16}
                                                height={16}
                                            />
                                        </div>
                                    ) : (
                                        <div className="w-4 h-4">
                                            <Image
                                                src={VisaIcon}
                                                alt="MasterCard"
                                                width={16}
                                                height={16}
                                            />
                                        </div>
                                    )}
