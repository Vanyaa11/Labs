import { Box, FormControlLabel, Grid, Stack, Switch, Typography } from '@mui/material';
import { format } from 'date-fns';
import { usePrisonerContext } from 'features/DataManagement/Prisoners/Context/PrisonerContext';
import { useDeleteTimeline } from 'features/DataManagement/Prisoners/Hooks';
import { useLocales } from 'locales';
import { cloneDeep, isArray, isEmpty, isNumber, map, compact } from 'lodash';
import { useSnackbar } from 'notistack';
import { useEffect, useState } from 'react';
import { IPrisonerTimelineList, IPrisonerTimelineTableRow } from 'Shared/@types/data';
import Markdown from 'Shared/components/markdown';
import { AccordionContainer } from './Accordion';
import { format as jalaliFormat } from 'date-fns-jalali';

// export interface HeadCell {
//   disablePadding: boolean;
//   id: string;
//   label: string;
//   numeric: boolean;
// }

// type Props = {
//   onChangeTimelineId: (id?: number) => void;
//   data?: IPrisonerTimelineList;
//   refetchList?: any;
// };

// export const TimelineList = ({ onChangeTimelineId, data, refetchList }: Props) => {
//   const { translate, currentLang } = useLocales();
//   const isFarsi = currentLang.value == 'fa';
//   const { enqueueSnackbar } = useSnackbar();

//   const handleContentFontFamily = () => {
//     const font = 'Lato';
//     return font;
//   };
//   const handleTitleFontFamily = () => {
//     const font = currentLang.value == 'en' ? 'Oswald' : 'BTraffic';
//     return font;
//   };

//   const { secondaryLang, primaryLang } = usePrisonerContext();

//   const [toggle, setToggle] = useState(true);

//   const [tableData, setTableData] = useState<IPrisonerTimelineTableRow[]>();
//   const [secondaryDescription, setSecondaryDescription] = useState('');
//   const [primaryDescription, setPrimaryDescription] = useState('');
//   // let secondaryDescription = '';
//   // let primaryDescription = '';
//   useEffect(() => {
//     if (data && data?.timelines) {
//       const cloned = cloneDeep(data?.timelines);
//       const res: (IPrisonerTimelineTableRow | null)[] = compact(
//         map(cloned, (prisoner) => {
//           if (prisoner) {
//             return {
//               id: prisoner.id,
//               date: prisoner.entryAt,
//               source: prisoner && !isEmpty(prisoner.sources) ? prisoner.sources : [],
//               translations: prisoner.translations,
//               formatDate: prisoner.displayFormatDate,
//             };
//           }
//           return null;
//         })
//       );
//       setTableData(res.filter(Boolean) as IPrisonerTimelineTableRow[]);
//     }
//   }, [data]);

//   const { mutate: deleteTimeline } = useDeleteTimeline();
//   const handleDeleteRow = (id: number, closeModal: any) => {
//     deleteTimeline(id, {
//       onSuccess: () => {
//         refetchList();
//         enqueueSnackbar(translate('deleteSuccess'));
//         closeModal();
//       },
//       onError: (error) => {
//         enqueueSnackbar(
//           translate('deleteSuccess', {
//             variant: 'error',
//           })
//         );
//       },
//     });
//   };

//   const handleEditTimeline = (id: number) => {
//     window.scrollTo({
//       top: 0,
//       behavior: 'smooth',
//     });
//     onChangeTimelineId(id);
//   };

//   // let secondaryDescription = '';
//   // let primaryDescription = '';

//   console.log(tableData,'tableData')

//   return (
//     <>
//       <Stack direction="row" justifyContent="right">
//         <FormControlLabel
//           dir="rtl"
//           control={
//             <Switch
//               onChange={(event) => setToggle(event.target.checked)}
//               checked={toggle}
//               inputProps={{
//                 'aria-labelledby': 'switch-list-label-wifi',
//               }}
//             />
//           }
//           label={
//             <Typography
//               variant="body1"
//               sx={{
//                 cursor: 'pointer',
//                 fontFamily: isFarsi ? 'BTraffic' : '',
//                 fontSize: isFarsi ? '16px' : '14px',
//                 fontWeight: 'bold',
//               }}
//             >
//               {translate('expandAll')}
//             </Typography>
//           }
//           sx={{ mb: 2, mx: 0 }}
//         />
//       </Stack>
//       {map(tableData, (row, index) => {
//         map(row.translations, (item) => {
//           if (item.language === primaryLang.name
//             ){
              
//             // primaryDescription = item.description;
//             setPrimaryDescription(item.description)
//             console.log(primaryDescription,'primaryLangDesc')
//           }
//           if (item.language === secondaryLang) {

//             // secondaryDescription = item.description;
//             setSecondaryDescription(item.description)
//             console.log(item.description,'secndaryLangDesc')
//           }
//         });
//         return (
//           <AccordionContainer
//             key={index}
//             data={row}
//             expandAll={toggle}
//             onEditRow={handleEditTimeline}
//             onDeleteRow={(closeModal: any) => {
//               handleDeleteRow(row.id, closeModal);
//             }}
//           >
//             <Grid container py={0} my={0} dir="ltr" spacing={2}>
//               <Grid item xs={6}>
//                 <Markdown children={secondaryDescription} />
//               </Grid>
//               <Grid item xs={6}>
//                 <Markdown children={primaryDescription} />
//               </Grid>
//               {!isEmpty(row.source) && (
//                 <Grid item xs={12} dir={isFarsi ? 'rtl' : 'ltr'}>
//                   <Typography
//                     key={index}
//                     sx={{
//                       fontFamily: handleTitleFontFamily(),
//                       fontWeight: isFarsi ? 700 : 300,
//                       fontSize: isFarsi ? '18px' : '17px',
//                     }}
//                   >
//                     {translate('links')}:
//                   </Typography>
//                   <Box display="flex">
//                     {map(row.source, (item: any, index: number) => {
//                       return (
//                         <Typography
//                           key={index}
//                           sx={{
//                             mb: 2,
//                             mr: 2,
//                             fontFamily: handleContentFontFamily(),
//                             fontWeight: 'bold',
//                             fontSize: '14px',
//                             textDecoration: 'underline',
//                             cursor: 'pointer',
//                             ':hover': {
//                               color: '#00AB55',
//                             },
//                           }}
//                           onClick={() => window.open(item)}
//                         >
//                           {item}
//                         </Typography>
//                       );
//                     })}
//                   </Box>
//                 </Grid>
//               )}
//             </Grid>
//           </AccordionContainer>
//         );
//       })}
//     </>
//   );
// };

type Props = {
  onChangeTimelineId: (id?: number) => void;
  data?: IPrisonerTimelineList;
  refetchList?: any;
};

export const TimelineList = ({ onChangeTimelineId, data, refetchList }: Props) => {
  const { translate, currentLang } = useLocales();
  const { enqueueSnackbar } = useSnackbar();
  const { secondaryLang, primaryLang } = usePrisonerContext();
  const isFarsi = currentLang.value === 'fa';

  const [toggle, setToggle] = useState(true);
  const [tableData, setTableData] = useState<IPrisonerTimelineTableRow[]>();

    const handleContentFontFamily = () => {
    const font = 'Lato';
    return font;
  };
  const handleTitleFontFamily = () => {
    const font = currentLang.value == 'en' ? 'Oswald' : 'BTraffic';
    return font;
  };

  useEffect(() => {
    if (data && data.timelines) {
      const cloned = cloneDeep(data.timelines);
      const res = compact(
        map(cloned, (prisoner) => {
          if (prisoner) {
            return {
              id: prisoner.id,
              date: prisoner.entryAt,
              source: prisoner && !isEmpty(prisoner.sources) ? prisoner.sources : [],
              translations: prisoner.translations,
              formatDate: prisoner.displayFormatDate,
            };
          }
          return null;
        })
      );
      setTableData(res as IPrisonerTimelineTableRow[]);
    }
  }, [data]);

  const { mutate: deleteTimeline } = useDeleteTimeline();

  const handleDeleteRow = (id: number, closeModal: any) => {
    deleteTimeline(id, {
      onSuccess: () => {
        refetchList();
        enqueueSnackbar(translate('deleteSuccess'));
        closeModal();
      },
      onError: (error) => {
        enqueueSnackbar(
          translate('deleteSuccess', {
            variant: 'error',
          })
        );
      },
    });
  };

  const handleEditTimeline = (id: number) => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
    onChangeTimelineId(id);
  };

  return (
    <>
      <Stack direction="row" justifyContent="right">
        <FormControlLabel
          dir="rtl"
          control={
            <Switch
              onChange={(event) => setToggle(event.target.checked)}
              checked={toggle}
              inputProps={{
                'aria-labelledby': 'switch-list-label-wifi',
              }}
            />
          }
          label={
            <Typography
              variant="body1"
              sx={{
                cursor: 'pointer',
                fontFamily: isFarsi ? 'BTraffic' : '',
                fontSize: isFarsi ? '16px' : '14px',
                fontWeight: 'bold',
              }}
            >
              {translate('expandAll')}
            </Typography>
          }
          sx={{ mb: 2, mx: 0 }}
        />
      </Stack>
      {tableData && tableData.map((row, index) => {
        const primaryDescription = row.translations.find((item:any) => item.language === primaryLang.name)?.description || '';
        const secondaryDescription = row.translations.find((item:any) => item.language === secondaryLang)?.description || '';

        return (
          <AccordionContainer
            key={index}
            data={row}
            expandAll={toggle}
            onEditRow={handleEditTimeline}
            onDeleteRow={(closeModal: any) => {
              handleDeleteRow(row.id, closeModal);
            }}
          >
            <Grid container py={0} my={0} dir="ltr" spacing={2}>
              <Grid item xs={6}>
                <Markdown children={secondaryDescription} />
              </Grid>
              <Grid item xs={6}>
                <Markdown children={primaryDescription} />
              </Grid>
              {!isEmpty(row.source) && (
                <Grid item xs={12} dir={isFarsi ? 'rtl' : 'ltr'}>
                  <Typography
                    key={index}
                    sx={{
                      fontFamily: isFarsi ? 'BTraffic' : 'Oswald',
                      fontWeight: isFarsi ? 700 : 300,
                      fontSize: isFarsi ? '18px' : '17px',
                    }}
                  >
                    {translate('links')}:
                  </Typography>
                  <Box display="flex">
                    {/* {row.source.map((item: any, sourceIndex: number) => (
                      <Typography
                        key={sourceIndex}
                        sx={{
                          mb: 2,
                          mr: 2,
                          fontFamily: 'Lato',
                          fontWeight: 'bold',
                          fontSize: '14px',
                          textDecoration: 'underline',
                          cursor: 'pointer',
                          ':hover': {
                            color: '#00AB55',
                          },
                        }}
                        onClick={() => window.open(item)}
                      >
                        {item}
                      </Typography>
                    ))} */}
                     {!isEmpty(row.source) && (
                <Grid item xs={12} dir={isFarsi ? 'rtl' : 'ltr'}>
                  <Typography
                    key={index}
                    sx={{
                      fontFamily: handleTitleFontFamily(),
                      fontWeight: isFarsi ? 700 : 300,
                      fontSize: isFarsi ? '18px' : '17px',
                    }}
                  >
                    {translate('links')}:
                  </Typography>
                  <Box display="flex">
                    {map(row.source, (item: any, index: number) => {
                      return (
                        <Typography
                          key={index}
                          sx={{
                            mb: 2,
                            mr: 2,
                            fontFamily: handleContentFontFamily(),
                            fontWeight: 'bold',
                            fontSize: '14px',
                            textDecoration: 'underline',
                            cursor: 'pointer',
                            ':hover': {
                              color: '#00AB55',
                            },
                          }}
                          onClick={() => window.open(item)}
                        >
                          {item}
                        </Typography>
                      );
                    })}
                  </Box>
                </Grid>
              )}
                  </Box>
                </Grid>
              )}
            </Grid>
          </AccordionContainer>
        );
      })}
    </>
  );
};
