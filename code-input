// Paynt Method 

"use client";
import React, { useState } from "react";
import { PlusIcon, TrashIcon } from "@heroicons/react/20/solid";



const CompanyPayment = () => {

  const [isAddCard, setIsAddingCard] = useState(false);
  const [inputCardValues, setInputCardValues] = useState({
    cardNumber: "",
    cardHolder: "",
    cardExpirationDate: "",
    cardCvc: "",
  });

  const handleCardChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputCardValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleAddCardClick = () => {
    setIsAddingCard(true);
  };
  
  const handleCardCancel = () => {
    setIsAddingCard(false);
  }

  function detectCardType(cardNumber: string): string | null {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  }

  return (
    <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
      <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
          <div className="text-base font-semibold text-[#232429s]">
            Credit Cards
          </div>
        </div>
        <div className="flex flex-row">
          <button
            onClick={handleAddCardClick}
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
            Add New Card
          </div>
        </div>
      </div>
      {isAddCard && (
        <div className="overflow-hidden h-[440.89px] rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[15px]  flex flex-col gap-y-3 text-sm md:text-base font-normal">
          <fieldset>
            <legend className="block text-sm font-medium leading-6 text-gray-900">
              Card Details
            </legend>
            <div className="mt-2 -space-y-px rounded-md bg-white shadow-sm">
              <div>
                <label htmlFor="cardNumber" className="sr-only">
                  Card number
                </label>
                <input
                  pattern="[0-9\s]{13,19}"
                  type="numeric"
                  name="cardNumber"
                  id="cardNumber"
                  className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  placeholder="Card number"
                  value={inputCardValues.cardNumber}
                  onChange={(e) => handleCardChange(e)}
                />
              </div>
              <div>
                <label htmlFor="cardHolder" className="sr-only">
                  Cardholder Name
                </label>
                <input
                  type="text"
                  name="cardHolder"
                  id="cardHolder"
                  className="relative block w-full rounded-none  border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  placeholder="Cardholder Name"
                  value={inputCardValues.cardHolder}
                  onChange={(e) => handleCardChange(e)}
                />
              </div>
              <div className="flex -space-x-px">
                <div className="w-1/2 min-w-0 flex-1">
                  <label htmlFor="cardExpirationDate" className="sr-only">
                    Expiration date
                  </label>
                  <input
                    type="text"
                    name="cardExpirationDate"
                    id="cardExpirationDate"
                    className="relative px-1.5 block w-full rounded-none rounded-bl-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="MM / YY"
                    value={inputCardValues.cardExpirationDate}
                    onChange={(e) => handleCardChange(e)}
                  />
                </div>
                <div className="min-w-0 flex-1">
                  <label htmlFor="cardCvc" className="sr-only">
                    CVC
                  </label>
                  <input
                    type="text"
                    name="cardCvc"
                    id="cardCvc"
                    className="relative px-1.5 block w-full rounded-none rounded-br-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="CVC"
                    value={inputCardValues.cardCvc}
                    onChange={(e) => handleCardChange(e)}
                  />
                </div>
              </div>
            </div>
          </fieldset>
          <fieldset className="mt-6 bg-white">
            <legend className="block text-sm font-medium leading-6 text-gray-900">
              Billing address
            </legend>
            <div className="mt-2 -space-y-px rounded-md shadow-sm">
              <div>
                <label htmlFor="country" className="sr-only">
                  Country
                </label>
                <select
                  id="country"
                  name="country"
                  autoComplete="country-name"
                  className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900   focus:z-10   sm:text-sm sm:leading-6"
                >
                  <option>United States</option>
                  <option>Canada</option>
                  <option>Mexico</option>
                </select>
              </div>
              <div>
                <label htmlFor="postal-code" className="sr-only">
                  ZIP / Postal code
                </label>
                <input
                  type="text"
                  name="postal-code"
                  id="postal-code"
                  autoComplete="postal-code"
                  className="relative px-2.5 block w-full rounded-none rounded-b-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  placeholder="ZIP / Postal code"
                />
              </div>
            </div>
          </fieldset>
          <div className="flex justify-end gap-x-2 mt-3">
            <button
              className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
              onClick={handleCardCancel}
            >
              Cancel
            </button>

            <button
              className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
              // onClick={handleAddressSaveClick}
            >
              Save
            </button>
          </div>
        </div>
      </div>
      )}
      
    </div>
  );
};

export default CompanyPayment;

// попробувати юзанути для 4го табу 

export default CompanyDetails;



// CompanyInvoicing



import React, { useState } from "react";
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon
} from "@heroicons/react/20/solid";

const CompanyInvoicing = () => {
  interface MyData {
    number: string;
    date: string;
    value: string;
    state: string;
    actions: string;
  }
  

  const data: MyData[] = [
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
  ];
  const [isAdd, setIsAdding] = useState(false);

    const [inputValues, setInputValues] = useState({
      registrationNumber: '',
      vatId: '',
      legalCountry: '',
  });

  const handleAddClick = () => {
      setIsAdding(true);
  };

  const handleSaveClick = () => {
      // Perform save operation
      setIsAdding(false);
  };

  const handleCancelClick = () => {
    // Reset input values
    setInputValues({
        registrationNumber: '',
        vatId: '',
        legalCountry: '',
    });
    setIsAdding(false);
};

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target;
  setInputValues((prevValues) => ({
      ...prevValues,
      [name]: value,
  }));
};


  return (
    <>
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Email</div>
            <div className="flex items-center"><QuestionMarkCircleIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /></div>
          </div>
          <div className="flex flex-row">
          <button
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">Add Email Address</div>
          </div>
          
        </div>
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Address</div>
            <div className="flex items-center"><QuestionMarkCircleIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /></div>
          </div>
          <div className="flex flex-row">
          <button
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">Add invoicing Address</div>
          </div>
        </div>
      </div>

      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
        <table className="min-w-full mb-8">
          <thead className="divide-y divide-gray-300">
            <tr>
              <th
                scope="col"
                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
              >
                Invoice Number
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>

              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Data of Issue
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Value
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                State
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Actions
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
            </tr>
          </thead>
          <tbody>
            {/* {data.map((el:any, index:any) => (
                <tr key={index}>
                    <td key={index}>{el}</td>
                </tr>
             ))} */}
          </tbody>
        </table>
        <nav className="flex items-center justify-between border-t border-gray-200 px-4 sm:px-0">
          <div className="-mt-px flex w-0 flex-1">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <ArrowLongLeftIcon
                className="mr-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
              Previous
            </a>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <a
              href="#"
              className="border-indigo-500 text-indigo-600 inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              1
            </a>
            {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
            <a
              href="#"
              className="inline-flex items-center border-t-2  px-4 pt-4 text-sm font-medium"
              aria-current="page"
            >
              2
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              3
            </a>
            <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              ...
            </span>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              8
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              9
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              10
            </a>
          </div>
          <div className="-mt-px flex w-0 flex-1 justify-end">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <ArrowLongRightIcon
                className="ml-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </a>
          </div>
        </nav>
      </div>
    </>
  );
};
export default CompanyInvoicing;







// Editing Company Invoicing 


import React, { useState } from "react";


interface CompanyDetailsProps {
  descriptions: string[];
}

const CompanyDetails = ({ descriptions }: CompanyDetailsProps) => {
  const [isEditing, setIsEditing] = useState({
      block1: false,
      block2: false,
  });

  const [inputValues, setInputValues] = useState({
      registrationNumber: '',
      vatId: '',
      legalCountry: '',
      legalCity: '',
      legalStreet: '',
      zipCode: ''

  });

  const penIcon = (
      <svg
          width="14"
          height="13"
          viewBox="0 0 14 13"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
      >
          <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M11.0002 0.252441C10.4483 0.252441 9.91901 0.471676 9.52877 0.861917L1.19544 9.19525C1.11 9.28069 1.04939 9.38774 1.02008 9.50496L0.353415 12.1716C0.296619 12.3988 0.363185 12.6391 0.528772 12.8047C0.694359 12.9703 0.934684 13.0369 1.16187 12.9801L3.82853 12.3134C3.94576 12.2841 4.05281 12.2235 4.13825 12.1381L12.4716 3.80473C12.6648 3.6115 12.8181 3.3821 12.9227 3.12964C13.0272 2.87718 13.0811 2.60659 13.0811 2.33332C13.0811 2.06006 13.0272 1.78947 12.9227 1.537C12.8181 1.28454 12.6648 1.05514 12.4716 0.861917C12.2784 0.668689 12.049 0.515413 11.7965 0.410839C11.544 0.306265 11.2734 0.252441 11.0002 0.252441ZM10.4716 1.80473C10.6118 1.66453 10.8019 1.58577 11.0002 1.58577C11.0983 1.58577 11.1956 1.60511 11.2863 1.64268C11.3769 1.68025 11.4594 1.73531 11.5288 1.80473C11.5982 1.87414 11.6533 1.95655 11.6908 2.04725C11.7284 2.13794 11.7477 2.23515 11.7477 2.33332C11.7477 2.43149 11.7284 2.5287 11.6908 2.6194C11.6533 2.71009 11.5982 2.7925 11.5288 2.86192L3.32601 11.0647L1.91642 11.4171L2.26882 10.0075L10.4716 1.80473Z"
              fill="url(#paint0_linear_302_1255)"
          />
          <path
              d="M7.00018 11.6667C6.63199 11.6667 6.33351 11.9651 6.33351 12.3333C6.33351 12.7015 6.63199 13 7.00018 13H13.0002C13.3684 13 13.6668 12.7015 13.6668 12.3333C13.6668 11.9651 13.3684 11.6667 13.0002 11.6667H7.00018Z"
              fill="url(#paint1_linear_302_1255)"
          />
          <defs>
              <linearGradient
                  id="paint0_linear_302_1255"
                  x1="0.889052"
                  y1="1.39645"
                  x2="15.5422"
                  y2="10.7033"
                  gradientUnits="userSpaceOnUse"
              >
                  <stop offset="0.00777433" stopColor="#B3B1B6" />
                  <stop offset="0.435126" stopColor="#B797FF" />
                  <stop offset="1" stopColor="#B4ADC3" />
              </linearGradient>
              <linearGradient
                  id="paint1_linear_302_1255"
                  x1="0.889052"
                  y1="1.39645"
                  x2="15.5422"
                  y2="10.7033"
                  gradientUnits="userSpaceOnUse"
              >
                  <stop offset="0.00777433" stopColor="#B3B1B6" />
                  <stop offset="0.435126" stopColor="#B797FF" />
                  <stop offset="1" stopColor="#B4ADC3" />
              </linearGradient>
          </defs>
      </svg>
  );

  const handleEditClick = (blockName: string) => {
      setIsEditing((prevState) => ({
          ...prevState,
          [blockName]: true,
      }));
  };

  const handleSaveClick = (blockName: string) => {
      // Perform save action here
      setIsEditing((prevState) => ({
          ...prevState,
          [blockName]: false,
      }));
  };

  const handleCancelClick = (blockName: string) => {
      // Reset input values and cancel edit mode
      setInputValues((prevValues) => ({
          ...prevValues,
          [blockName]: '',
      }));
      setIsEditing((prevState) => ({
          ...prevState,
          [blockName]: false,
      }));
  };

  const handleChange = (
      e: React.ChangeEvent<HTMLInputElement>,
      blockName: string,
  ) => {
      const { name, value } = e.target;
      setInputValues((prevValues) => ({
          ...prevValues,
          [name]: value,
      }));
  };

  return (
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
          <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6">
              <div className=" py-5 sm:p-6 px-[15px]  flex flex-col gap-y-3 text-sm md:text-base font-normal">
                  {!isEditing.block1 && (
                      <button
                          className="flex self-end border-[1px]  border-[#B3B1B6] flex items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
       focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                          onClick={() => handleEditClick('block1')}
                      >
                          {penIcon}
                      </button>
                  )}
                  <div className="isolate -space-y-px rounded-md shadow-sm">
                      <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                          <label
                              htmlFor="registrationNumber"
                              className="block text-xs font-medium text-gray-900"
                          >
                              Registration Number
                          </label>
                          <input
                              type="text"
                              name="registrationNumber"
                              id="registrationNumber"
                              className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                              placeholder="0478551123"
                              value={inputValues.registrationNumber}
                              onChange={(e) => handleChange(e, 'block1')}
                              disabled={!isEditing.block1}
                          />
                      </div>
                      <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                          <label
                              htmlFor="vatId"
                              className="block text-xs font-medium text-gray-900"
                          >
                              Vat ID
                          </label>
                          <input
                              type="text"
                              name="vatId"
                              id="vatId"
                              className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                              placeholder="LM21354873"
                              value={inputValues.vatId}
                              onChange={(e) => handleChange(e, 'block1')}
                              disabled={!isEditing.block1}
                          />
                      </div>
                  </div>
                  {isEditing.block1 && (
                      <div className="flex justify-end gap-x-2">
                      
                          <button
                              className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                              onClick={() => handleCancelClick('block1')}
                          >
                              Cancel
                          </button>
                          <button
                              className="rounded-md bg-[#22C55E] text-[#FFFFFF]
                              px-3.5 py-1.5  md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                              onClick={() => handleSaveClick('block1')}
                          >
                              Save
                          </button>
                      </div>
                  )}
              </div>
          </div>
          <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6">
              <div className="py-5 sm:p-6 px-[10px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
                  {!isEditing.block2 && (
                      <button
                          className="flex self-end border-[1px]  border-[#B3B1B6] flex items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
       focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                          onClick={() => handleEditClick('block2')}
                      >
                          {penIcon}
                      </button>
                  )}
                  <div className="isolate -space-y-px rounded-md shadow-sm">
                      <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                          <label
                              htmlFor="legalCountry"
                              className="block text-xs font-medium text-gray-900"
                          >
                              Legal Country
                          </label>
                          <input
                              type="text"
                              name="legalCountry"
                              id="legalCountry"
                              className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                              placeholder="United States"
                              value={inputValues.legalCountry}
                              onChange={(e) => handleChange(e, 'block2')}
                              disabled={!isEditing.block2}
                          />
                           
                      </div>
                      <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="legalCity"
                className="block text-xs font-medium text-gray-900"
              >
                Legal City
              </label>
              <input
                type="text"
                name="legalCity"
                id="legalCity"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="San Francisco"
                value={inputValues.legalCity}                
                onChange={(e) => handleChange(e, 'block2')}
                disabled={!isEditing.block2}
              />
            </div>
            <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="legalStreet"
                className="block text-xs font-medium text-gray-900"
              >
                Street
              </label>
              <input
                type="text"
                name="legalStreet"
                id="legalStreet"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="Brooklin st. 21 AG 103"
                value={inputValues.legalStreet}                
                onChange={(e) => handleChange(e, 'block2')}
                disabled={!isEditing.block2}
              />
            </div>
            <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="zipCode"
                className="block text-xs font-medium text-gray-900"
              >
                Zip Code
              </label>
              <input
                type="text"
                name="zipCode"
                id="zipCode"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="204873"
                value={inputValues.zipCode}                
                onChange={(e) => handleChange(e, 'block2')}
                disabled={!isEditing.block2}
              />
            </div>
            
                  </div>
                  {isEditing.block2 && (
                      <div className="flex justify-end gap-x-2">
                          <button
                              className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                              onClick={() => handleCancelClick('block2')}
                          >
                              Cancel
                          </button>

                          <button
                              className="rounded-md bg-[#22C55E] text-[#FFFFFF]
                              px-3.5 py-1.5  md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                              onClick={() => handleSaveClick('block2')}
                          >
                              Save
                          </button>
                      </div>
                  )}
              </div>
          </div>
      </div>
  );
};

export default CompanyDetails;


готовий компані інвоісінг 

import React, { useState } from "react";
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon,
  TrashIcon,
} from "@heroicons/react/20/solid";

const CompanyInvoicing = () => {
  interface MyData {
    number: string;
    date: string;
    value: string;
    state: string;
    actions: string;
  }

  const data: MyData[] = [
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
  ];
  const [isAdd, setIsAdding] = useState(false);

  const [emailInput, setEmailInput] = useState("");
  const [emailList, setEmailList] = useState<string[]>([]);

  // const [inputAddressValues, setInputAddressValues] = useState({
  //   registrationNumber: "",
  //   vatId: "",
  //   legalCountry: "",
  //   legalCity: "",
  //   legalStreet: "",
  //   zipCode: "",
  // });

  const handleAddClick = () => {
    setIsAdding(true);
  };

  const handleSaveClick = () => {
    if (emailInput) {
      setEmailList((prevList) => [...prevList, emailInput]);
      setEmailInput("");
    }
    setIsAdding(false);
  };

  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmailInput(e.target.value);
  };

  const handleEmailDelete = (index: number) => {
    setEmailList((prevList) => prevList.filter((_, i) => i !== index));
  };

  return (
    <>
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Email</div>
            <div className="flex items-center">
              <QuestionMarkCircleIcon
                className="h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </div>
          </div>
          {/* <div className="flex flex-row">
          <button
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">Add Email Address</div>
          </div> */}
          <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
            {emailList.map((email, index) => (
              <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                <div className="flex justify-between">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Email Address
                  </label>
                  <button
                    onClick={() => handleEmailDelete(index)}
                    className="ml-2 text-red-500"
                  >
                    <TrashIcon
                      className="h-5 w-5 text-[#EB001B]"
                      aria-hidden="true"
                    />
                  </button>
                </div>
                <input
                  type="text"
                  name="emailInput"
                  id="emailInput"
                  className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                  placeholder="bluebridgellc@mail.com"
                  value={email}
                  onChange={handleEmailInputChange}
                  disabled={!isAdd}
  
                />
                
              </div>
            ))}
            {isAdd && (
              <>
                <div className="relative rounded-md pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900 px-3"
                  >
                    Email Address
                  </label>
                  <input
                    type="text"
                    name="emailInput"
                    id="emailInput"
                    className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="bluebridgellc@mail.com"
                    value={emailInput}
                    onChange={handleEmailInputChange}
                    aria-invalid="true"
          aria-describedby="email-error"
                  />
                </div>
                <div className="flex justify-end gap-x-2 mx-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={() => {
                      setEmailInput("");
                      setIsAdding(false);
                    }}
                  >
                    Cancel
                  </button>
                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                    onClick={handleSaveClick}
                  >
                    Add
                  </button>
                </div>
              </>
            )}
            {!isAdd && (
              <div className="flex flex-row">
                <button
                  onClick={handleAddClick}
                  type="button"
                  className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  <PlusIcon className="h-5 w-5" aria-hidden="true" />
                </button>
                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                  Add Email Address
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Address</div>
            <div className="flex items-center">
              <QuestionMarkCircleIcon
                className="h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </div>
          </div>
          <div className="flex flex-row">
            <button
              type="button"
              className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            >
              <PlusIcon className="h-5 w-5" aria-hidden="true" />
            </button>
            <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
              Add invoicing Address
            </div>
          </div>
        </div>
      </div>

      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
        <table className="min-w-full mb-8">
          <thead className="divide-y divide-gray-300">
            <tr>
              <th
                scope="col"
                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
              >
                Invoice Number
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>

              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Data of Issue
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Value
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                State
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Actions
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
            </tr>
          </thead>
          <tbody>
            {/* {data.map((el:any, index:any) => (
                <tr key={index}>
                    <td key={index}>{el}</td>
                </tr>
             ))} */}
          </tbody>
        </table>
        <nav className="flex items-center justify-between border-t border-gray-200 px-4 sm:px-0">
          <div className="-mt-px flex w-0 flex-1">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <ArrowLongLeftIcon
                className="mr-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
              Previous
            </a>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <a
              href="#"
              className="border-indigo-500 text-indigo-600 inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              1
            </a>
            {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
            <a
              href="#"
              className="inline-flex items-center border-t-2  px-4 pt-4 text-sm font-medium"
              aria-current="page"
            >
              2
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              3
            </a>
            <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              ...
            </span>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              8
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              9
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              10
            </a>
          </div>
          <div className="-mt-px flex w-0 flex-1 justify-end">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <ArrowLongRightIcon
                className="ml-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </a>
          </div>
        </nav>
      </div>
    </>
  );
};
export default CompanyInvoicing;



та CompanyInvoicing 
import React, { useState } from "react";
import { Tooltip as ReactTooltip } from "react-tooltip";
import "react-tooltip/dist/react-tooltip.css";
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon,
  TrashIcon,
} from "@heroicons/react/20/solid";
import PenIcon from "../public/icons/penIcon.svg";
import Image from "next/image";

const CompanyInvoicing = () => {
  interface MyData {
    number: string;
    date: string;
    value: string;
    state: string;
    actions: string;
  }

  const data: MyData[] = [
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
  ];

  const [isAdd, setIsAdding] = useState(false);
  const [emailInput, setEmailInput] = useState("");
  const [emailList, setEmailList] = useState<string[]>([]);
  const [isAddressEditing, setIsAddressEditing] = useState(false);
  const [inputAddressValues, setInputAddressValues] = useState({
    registrationNumber: "",
    vatId: "",
    legalCountry: "",
    legalCity: "",
    legalStreet: "",
    zipCode: "",
  });

  const handleEditClick = () => {
    setIsAddressEditing(true);
  };

  const handleAddClick = () => {
    setIsAdding(true);
  };

  const handleSaveClick = () => {
    if (emailInput) {
      setEmailList((prevList) => [...prevList, emailInput]);
      setEmailInput("");
    }
    setIsAdding(false);
  };

  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmailInput(e.target.value);
  };

  const handleEmailDelete = (index: number) => {
    setEmailList((prevList) => prevList.filter((_, i) => i !== index));
  };

  const [isAddAddress, setIsAddingAddress] = useState(false);

  const handleAddAddressClick = () => {
    setIsAddingAddress(true);
  };

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputAddressValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleAddressSaveClick = () => {
    setIsAddressEditing(false);
  };
  const handleAddressCancel = () => {
    setInputAddressValues((prevValues) => ({
      ...prevValues,
    }));
    setIsAddressEditing(false);
  };

  return (
    <>
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Email</div>
            <div className="flex items-center">
              <QuestionMarkCircleIcon
                className="h-5 w-5 text-gray-400"
                aria-hidden="true"
                id="email-tooltip"
                data-tooltip-offset = "13"
              />
               <ReactTooltip
                  style={{ backgroundColor: "#F3F4F6", color: "#4D5F7A", width: "266px",textAlign: "center", border: "0.5px solid #F3F4F6", borderRadius: "4px"}}
                  anchorSelect="#email-tooltip"
                  place="top"
                  content="If you wish to receive invoices on a 
                  specific email address, type the email 
                  address here. Otherwise, we will use the 
                  Company specific email address if it 
                  exists. If not, we will use the address 
                  associated with this account."
                />
            </div>
          </div>
          <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
            {emailList.map((email, index) => (
              <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                <div className="flex justify-between">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Email Address
                  </label>
                  <button
                    onClick={() => handleEmailDelete(index)}
                    className="ml-2 text-red-500"
                  >
                    <TrashIcon
                      className="h-5 w-5 text-[#EB001B]"
                      aria-hidden="true"
                    />
                  </button>
                </div>
                <input
                  type="text"
                  name="emailInput"
                  id="emailInput"
                  className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                  placeholder="bluebridgellc@mail.com"
                  value={email}
                  onChange={handleEmailInputChange}
                  disabled={!isAdd}
                />
              </div>
            ))}
            {isAdd && (
              <>
                <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900 px-3"
                  >
                    Email Address
                  </label>
                  <input
                    type="text"
                    name="emailInput"
                    id="emailInput"
                    className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="bluebridgellc@mail.com"
                    value={emailInput}
                    onChange={handleEmailInputChange}
                    aria-invalid="true"
                    aria-describedby="email-error"
                  />
                </div>
                <div className="flex justify-end gap-x-2 mx-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={() => {
                      setEmailInput("");
                      setIsAdding(false);
                    }}
                  >
                    Cancel
                  </button>
                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                    onClick={handleSaveClick}
                  >
                    Add
                  </button>
                </div>
              </>
            )}
            {!isAdd && (
              <div className="flex flex-row">
                <button
                  onClick={handleAddClick}
                  type="button"
                  className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 "
                >
                  <PlusIcon className="h-5 w-5" aria-hidden="true" />
                </button>
                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                  Add Email Address
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row justify-between  text-sm md:text-base font-normal">
            <div className="flex gap-[10px]">
              <div className="text-base font-semibold">Invoicing Address</div>
              <div className="flex mt-[2px]">
                <QuestionMarkCircleIcon
                  data-tooltip-offset = "13"
                  id="address-tooltip"
                  className="h-5 w-5 text-gray-400 "
                  aria-hidden="true"
                />
                <ReactTooltip
                  style={{ backgroundColor: "#F3F4F6", color: "#4D5F7A", width: "266px",textAlign: "center", border: "0.5px solid #F3F4F6", borderRadius: "4px"}}
                  anchorSelect="#address-tooltip"
                  place="top"
                  content="If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                  If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                   'Company Details' page."
                />
              </div>
            </div>
            {isAddAddress && (
              <div className="flex items-center -mt-[8px]">
                <button
                  className="flex self-end border-[1px]  border-[#B3B1B6] items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                  onClick={handleEditClick}
                >
                  <Image src={PenIcon} className="h-full w-full" alt="pen" />
                </button>
              </div>
            )}
          </div>

          {!isAddAddress && (
            <div className="flex flex-row">
              <button
                onClick={handleAddAddressClick}
                type="button"
                className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              >
                <PlusIcon className="h-5 w-5" aria-hidden="true" />
              </button>
              <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                Add invoicing Address
              </div>
            </div>
          )}

          {isAddAddress && (
            <div className="flex flex-col px-3 ">
              <div className="isolate -space-y-px rounded-md shadow-sm">
                <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCountry"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal Country
                  </label>
                  <input
                    type="text"
                    name="legalCountry"
                    id="legalCountry"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="United States"
                    value={inputAddressValues.legalCountry}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCity"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal City
                  </label>
                  <input
                    type="text"
                    name="legalCity"
                    id="legalCity"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="San Francisco"
                    value={inputAddressValues.legalCity}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalStreet"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Street
                  </label>
                  <input
                    type="text"
                    name="legalStreet"
                    id="legalStreet"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="Brooklin st. 21 AG 103"
                    value={inputAddressValues.legalStreet}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="zipCode"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Zip Code
                  </label>
                  <input
                    type="text"
                    name="zipCode"
                    id="zipCode"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="204873"
                    value={inputAddressValues.zipCode}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
              </div>
              {isAddressEditing && (
                <div className="flex justify-end gap-x-2 mt-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={handleAddressCancel}
                  >
                    Cancel
                  </button>

                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                    onClick={handleAddressSaveClick}
                  >
                    Save
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
        <table className="min-w-full mb-8">
          <thead className="divide-y divide-gray-300">
            <tr>
              <th
                scope="col"
                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
              >
                Invoice Number
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>

              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Data of Issue
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Value
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                State
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Actions
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
            </tr>
          </thead>
          <tbody>
            {/* {data.map((el:any, index:any) => (
                <tr key={index}>
                    <td key={index}>{el}</td>
                </tr>
             ))} */}
          </tbody>
        </table>
        <nav className="flex items-center justify-between border-t border-gray-200 px-4 sm:px-0">
          <div className="-mt-px flex w-0 flex-1">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <ArrowLongLeftIcon
                className="mr-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
              Previous
            </a>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <a
              href="#"
              className="border-indigo-500 inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              1
            </a>
            {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
            <a
              href="#"
              className="inline-flex items-center border-t-2  px-4 pt-4 text-sm font-medium"
              aria-current="page"
            >
              2
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              3
            </a>
            <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              ...
            </span>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              8
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              9
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              10
            </a>
          </div>
          <div className="-mt-px flex w-0 flex-1 justify-end">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <ArrowLongRightIcon
                className="ml-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </a>
          </div>
        </nav>
      </div>
    </>
  );
};
export default CompanyInvoicing;





/// Company Details 


import React, { useState } from "react";

interface CompanyDetailsProps {
  descriptions: string[];
}

const CompanyDetails = ({ descriptions }: CompanyDetailsProps) => {
  const [isEditing, setIsEditing] = useState({
    block1: false,
    block2: false,
  });

  const [inputValues, setInputValues] = useState({
    registrationNumber: "",
    vatId: "",
    legalCountry: "",
    legalCity: "",
    legalStreet: "",
    zipCode: "",
  });

  const penIcon = (
    <svg
      width="14"
      height="13"
      viewBox="0 0 14 13"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.0002 0.252441C10.4483 0.252441 9.91901 0.471676 9.52877 0.861917L1.19544 9.19525C1.11 9.28069 1.04939 9.38774 1.02008 9.50496L0.353415 12.1716C0.296619 12.3988 0.363185 12.6391 0.528772 12.8047C0.694359 12.9703 0.934684 13.0369 1.16187 12.9801L3.82853 12.3134C3.94576 12.2841 4.05281 12.2235 4.13825 12.1381L12.4716 3.80473C12.6648 3.6115 12.8181 3.3821 12.9227 3.12964C13.0272 2.87718 13.0811 2.60659 13.0811 2.33332C13.0811 2.06006 13.0272 1.78947 12.9227 1.537C12.8181 1.28454 12.6648 1.05514 12.4716 0.861917C12.2784 0.668689 12.049 0.515413 11.7965 0.410839C11.544 0.306265 11.2734 0.252441 11.0002 0.252441ZM10.4716 1.80473C10.6118 1.66453 10.8019 1.58577 11.0002 1.58577C11.0983 1.58577 11.1956 1.60511 11.2863 1.64268C11.3769 1.68025 11.4594 1.73531 11.5288 1.80473C11.5982 1.87414 11.6533 1.95655 11.6908 2.04725C11.7284 2.13794 11.7477 2.23515 11.7477 2.33332C11.7477 2.43149 11.7284 2.5287 11.6908 2.6194C11.6533 2.71009 11.5982 2.7925 11.5288 2.86192L3.32601 11.0647L1.91642 11.4171L2.26882 10.0075L10.4716 1.80473Z"
        fill="url(#paint0_linear_302_1255)"
      />
      <path
        d="M7.00018 11.6667C6.63199 11.6667 6.33351 11.9651 6.33351 12.3333C6.33351 12.7015 6.63199 13 7.00018 13H13.0002C13.3684 13 13.6668 12.7015 13.6668 12.3333C13.6668 11.9651 13.3684 11.6667 13.0002 11.6667H7.00018Z"
        fill="url(#paint1_linear_302_1255)"
      />
      <defs>
        <linearGradient
          id="paint0_linear_302_1255"
          x1="0.889052"
          y1="1.39645"
          x2="15.5422"
          y2="10.7033"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0.00777433" stopColor="#B3B1B6" />
          <stop offset="0.435126" stopColor="#B797FF" />
          <stop offset="1" stopColor="#B4ADC3" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_302_1255"
          x1="0.889052"
          y1="1.39645"
          x2="15.5422"
          y2="10.7033"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0.00777433" stopColor="#B3B1B6" />
          <stop offset="0.435126" stopColor="#B797FF" />
          <stop offset="1" stopColor="#B4ADC3" />
        </linearGradient>
      </defs>
    </svg>
  );

  const handleEditClick = (blockName: string) => {
    setIsEditing((prevState) => ({
      ...prevState,
      [blockName]: true,
    }));
  };

  const handleSaveClick = (blockName: string) => {
    setIsEditing((prevState) => ({
      ...prevState,
      [blockName]: false,
    }));
  };

  const handleCancelClick = (blockName: string) => {
    setInputValues((prevValues) => ({
      ...prevValues,
      [blockName]: "",
    }));
    setIsEditing((prevState) => ({
      ...prevState,
      [blockName]: false,
    }));
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    blockName: string
  ) => {
    const { name, value } = e.target;
    setInputValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  return (
    <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6">
        <div className=" py-5 sm:p-6 px-[15px]  flex flex-col gap-y-3 text-sm md:text-base font-normal">
          {!isEditing.block1 && (
            <button
              className="flex self-end border-[1px]  border-[#B3B1B6] items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
       focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              onClick={() => handleEditClick("block1")}
            >
              {penIcon}
            </button>
          )}
          <div className="isolate -space-y-px rounded-md shadow-sm">
            <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="registrationNumber"
                className="block text-xs font-medium text-gray-900"
              >
                Registration Number
              </label>
              <input
                type="text"
                name="registrationNumber"
                id="registrationNumber"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="0478551123"
                value={inputValues.registrationNumber}
                onChange={(e) => handleChange(e, "block1")}
                disabled={!isEditing.block1}
              />
            </div>
            <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="vatId"
                className="block text-xs font-medium text-gray-900"
              >
                Vat ID
              </label>
              <input
                type="text"
                name="vatId"
                id="vatId"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="LM21354873"
                value={inputValues.vatId}
                onChange={(e) => handleChange(e, "block1")}
                disabled={!isEditing.block1}
              />
            </div>
          </div>
          {isEditing.block1 && (
            <div className="flex justify-end gap-x-2">
              <button
                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={() => handleCancelClick("block1")}
              >
                Cancel
              </button>
              <button
                className="rounded-md bg-[#22C55E] text-[#FFFFFF]
                              px-3.5 py-1.5  md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                onClick={() => handleSaveClick("block1")}
              >
                Save
              </button>
            </div>
          )}
        </div>
      </div>
      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[10px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
          {!isEditing.block2 && (
            <button
              className="flex self-end border-[1px]  border-[#B3B1B6] items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
       focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              onClick={() => handleEditClick("block2")}
            >
              {penIcon}
            </button>
          )}
          <div className="isolate -space-y-px rounded-md shadow-sm">
            <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="legalCountry"
                className="block text-xs font-medium text-gray-900"
              >
                Legal Country
              </label>
              <input
                type="text"
                name="legalCountry"
                id="legalCountry"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="United States"
                value={inputValues.legalCountry}
                onChange={(e) => handleChange(e, "block2")}
                disabled={!isEditing.block2}
              />
            </div>
            <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="legalCity"
                className="block text-xs font-medium text-gray-900"
              >
                Legal City
              </label>
              <input
                type="text"
                name="legalCity"
                id="legalCity"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="San Francisco"
                value={inputValues.legalCity}
                onChange={(e) => handleChange(e, "block2")}
                disabled={!isEditing.block2}
              />
            </div>
            <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="legalStreet"
                className="block text-xs font-medium text-gray-900"
              >
                Street
              </label>
              <input
                type="text"
                name="legalStreet"
                id="legalStreet"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="Brooklin st. 21 AG 103"
                value={inputValues.legalStreet}
                onChange={(e) => handleChange(e, "block2")}
                disabled={!isEditing.block2}
              />
            </div>
            <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
              <label
                htmlFor="zipCode"
                className="block text-xs font-medium text-gray-900"
              >
                Zip Code
              </label>
              <input
                type="text"
                name="zipCode"
                id="zipCode"
                className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                placeholder="204873"
                value={inputValues.zipCode}
                onChange={(e) => handleChange(e, "block2")}
                disabled={!isEditing.block2}
              />
            </div>
          </div>
          {isEditing.block2 && (
            <div className="flex justify-end gap-x-2">
              <button
                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={() => handleCancelClick("block2")}
              >
                Cancel
              </button>

              <button
                className="rounded-md bg-[#22C55E] text-[#FFFFFF]
                              px-3.5 py-1.5  md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                onClick={() => handleSaveClick("block2")}
              >
                Save
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CompanyDetails;

//    Page company



import React, { useState } from "react";
import { COMPANIES } from "@/public/Data";
import { CompanyType } from "@/components/CompanyItem";
import Image from "next/image";
import { useTranslation } from "@/app/i18n";
import Tabs, { TabType } from "@/components/Tabs";
import AppInfo from "@/components/AppInfo";
import CompanyInfo from "@/components/CompanyInfo";
import { EnvelopeIcon, PhoneIcon, TrashIcon } from '@heroicons/react/20/solid'

const Company = async ({ params: { lng, companies } }: { params: any }) => {
  const { t } = await useTranslation(lng);
  const tabs: TabType[] = [
    {
      id: "1",
      name: t("Company Details"),
      href: "#",
      current: true,
    },
    {
      id: "2",
      name: t("Payment Methods"),
      href: "#",
      current: false,
    },
    {
      id: "3",
      name: t("User Roles"),
      href: "#",
      current: false,
    },
    {
      id: "4",
      name: t("Invoices"),
      href: "#",
      current: false,
    },
  ];



  const penIcon = (
    <svg
      width="14"
      height="13"
      viewBox="0 0 14 13"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.0002 0.252441C10.4483 0.252441 9.91901 0.471676 9.52877 0.861917L1.19544 9.19525C1.11 9.28069 1.04939 9.38774 1.02008 9.50496L0.353415 12.1716C0.296619 12.3988 0.363185 12.6391 0.528772 12.8047C0.694359 12.9703 0.934684 13.0369 1.16187 12.9801L3.82853 12.3134C3.94576 12.2841 4.05281 12.2235 4.13825 12.1381L12.4716 3.80473C12.6648 3.6115 12.8181 3.3821 12.9227 3.12964C13.0272 2.87718 13.0811 2.60659 13.0811 2.33332C13.0811 2.06006 13.0272 1.78947 12.9227 1.537C12.8181 1.28454 12.6648 1.05514 12.4716 0.861917C12.2784 0.668689 12.049 0.515413 11.7965 0.410839C11.544 0.306265 11.2734 0.252441 11.0002 0.252441ZM10.4716 1.80473C10.6118 1.66453 10.8019 1.58577 11.0002 1.58577C11.0983 1.58577 11.1956 1.60511 11.2863 1.64268C11.3769 1.68025 11.4594 1.73531 11.5288 1.80473C11.5982 1.87414 11.6533 1.95655 11.6908 2.04725C11.7284 2.13794 11.7477 2.23515 11.7477 2.33332C11.7477 2.43149 11.7284 2.5287 11.6908 2.6194C11.6533 2.71009 11.5982 2.7925 11.5288 2.86192L3.32601 11.0647L1.91642 11.4171L2.26882 10.0075L10.4716 1.80473Z"
        fill="url(#paint0_linear_302_1255)"
      />
      <path
        d="M7.00018 11.6667C6.63199 11.6667 6.33351 11.9651 6.33351 12.3333C6.33351 12.7015 6.63199 13 7.00018 13H13.0002C13.3684 13 13.6668 12.7015 13.6668 12.3333C13.6668 11.9651 13.3684 11.6667 13.0002 11.6667H7.00018Z"
        fill="url(#paint1_linear_302_1255)"
      />
      <defs>
        <linearGradient
          id="paint0_linear_302_1255"
          x1="0.889052"
          y1="1.39645"
          x2="15.5422"
          y2="10.7033"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0.00777433" stopColor="#B3B1B6" />
          <stop offset="0.435126" stopColor="#B797FF" />
          <stop offset="1" stopColor="#B4ADC3" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_302_1255"
          x1="0.889052"
          y1="1.39645"
          x2="15.5422"
          y2="10.7033"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0.00777433" stopColor="#B3B1B6" />
          <stop offset="0.435126" stopColor="#B797FF" />
          <stop offset="1" stopColor="#B4ADC3" />
        </linearGradient>
      </defs>
    </svg>
  );

  

  const data = COMPANIES.find((item: CompanyType) => item.id === companies);

 

  return (
    <div className="pt-10 lg:pt-20 flex flex-col">
      <div className="flex gap-5 lg:gap-7 mb-24">
        <div className="h-[64px] min-w-[64px] lg:h-[120px] lg:min-w-[120px] bg-gradient-to-r from-[#F2F2F2] to-[#ECECEC] rounded-md">
          {data?.icon && (
            <Image
              src={data?.icon}
              className="h-full w-full"
              alt={data.title}
            />
          )}
        </div>

        <div className="flex flex-col  gap-y-1 md:gap-y-3 justify-between  mt-2 lg:mt-0">
          <div className="flex flex-row justify-between ">
            <h4 className="font-semibold text-base md:text-xl lg-text:2xl mr-[10vw]">
              {data?.title}
            </h4>
            <div className="flex gap-x-5  -mt-2   gap-[6px]">
              <button
                className="border-[1px]  border-[#B3B1B6] flex items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
         focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              >
                {penIcon}
              </button>
              <button className="bg-[#EB001B] flex items-center w-[36px] h-[36px] text-white text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
              <TrashIcon className="h-5 w-5 text-[#FFFFFF]" aria-hidden="true" />
              </button>
            </div>
          </div>
          <p className="font-normal text-sm md:text-base sm:text-sm lg:text-lg text-gray500">
            Company Legal Name
          </p>
          <div className="flex flex-col mt-[10px] gap-y-[10px] ">
            <div className="flex flex-row justify-between">
              <div className="flex  gap-[10px]">
                <div className="flex items-center"><EnvelopeIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /></div>
                <div className="flex font-normal text-base md:text-sm text-gray-400">Bluebridgellcl@mail.com</div>
              </div>
              <div className="flex text-center text-xs py-[2px] px-[10px] rounded-[6px] bg-[#DEF7EC] text-[#2A3342]">Verified</div>
            </div>
            <div className="flex flex-row justify-between">
              <div className="flex flex-row gap-[10px]">
                <div className="flex items-center"><PhoneIcon className="h-5 w-5 text-gray-400" aria-hidden="true" /></div>
                <div className="text-base md:text-sm text-gray-400">+1 (555) 987-6543</div>
              </div>
              <div className=" text-xs py-[2px] px-[10px] text-center rounded-[6px] bg-[#FCE8F3] text-[#99154B]">Not Verified</div>
            </div>
          </div>
        </div>
      </div>

      <CompanyInfo tabsData={tabs} lng={lng} />
    </div>
    // <div className="grid grid-cols-1 pt-10 lg:pt-20 ">
    //   <div className="grid grid-cols-2 gap-5 lg:gap-7 mb-24">
    //     <div className="h-[64px] min-w-[64px] lg:h-[120px] lg:min-w-[120px] bg-gradient-to-r from-[#F2F2F2] to-[#ECECEC] rounded-md">
    //       {data?.icon && (
    //         <Image
    //           src={data?.icon}
    //           className="h-full w-full"
    //           alt={data.title}
    //         />
    //       )}
    //     </div>

    //     <div className="grid grid-cols-3">
    //         <div className="gird ">1</div>
    //         <div className="grid">2</div>
    //         <div className="grid">3</div>
    //     </div>
    //   </div>

    //   <CompanyInfo tabsData={tabs} lng={lng} />
    // </div>
  );
};

export default Company;




import React, { useState } from "react";
import { Tooltip as ReactTooltip } from "react-tooltip";
import "react-tooltip/dist/react-tooltip.css";
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon,
  TrashIcon,
} from "@heroicons/react/20/solid";
import PenBorderIcon from "../public/icons/penBorderIcon.svg";
import Image from "next/image";
import DownloadIcon from "../public/icons/downloadIcon.svg";

const CompanyInvoicing = () => {
  interface MyData {
    number: string;
    date: string;
    value: string;
    state: string;
    actions: string;
  }

  const data: MyData[] = [
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
  ];

  const [isAdd, setIsAdding] = useState(false);
  const [emailInput, setEmailInput] = useState("");
  const [emailList, setEmailList] = useState<string[]>([]);
  const [isAddressEditing, setIsAddressEditing] = useState(false);
  const [inputAddressValues, setInputAddressValues] = useState({
    registrationNumber: "",
    vatId: "",
    legalCountry: "",
    legalCity: "",
    legalStreet: "",
    zipCode: "",
  });

  const handleEditClick = () => {
    setIsAddressEditing(true);
  };

  const handleAddClick = () => {
    setIsAdding(true);
  };

  const handleSaveClick = () => {
    if (emailInput) {
      setEmailList((prevList) => [...prevList, emailInput]);
      setEmailInput("");
    }
    setIsAdding(false);
  };

  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmailInput(e.target.value);
  };

  const handleEmailDelete = (index: number) => {
    setEmailList((prevList) => prevList.filter((_, i) => i !== index));
  };

  const [isAddAddress, setIsAddingAddress] = useState(false);

  const handleAddAddressClick = () => {
    setIsAddingAddress(true);
  };

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputAddressValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleAddressSaveClick = () => {
    setIsAddressEditing(false);
  };
  const handleAddressCancel = () => {
    setInputAddressValues((prevValues) => ({
      ...prevValues,
    }));
    setIsAddressEditing(false);
  };

  return (
    <>
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Email</div>
            <div className="flex items-center">
              <QuestionMarkCircleIcon
                className="h-5 w-5 text-gray-400"
                aria-hidden="true"
                id="email-tooltip"
                data-tooltip-offset="13"
              />
              <ReactTooltip
                style={{
                  backgroundColor: "white",
                  color: "#4D5F7A",
                  width: "266px",
                  textAlign: "center",
                  border: "0.5px solid #F3F4F6",
                  borderRadius: "4px",
                  // boxShadow: "0px 2px 4px -2px #0000000D",
                  boxShadow: "0px 4px 6px -1px #0000001A ",
                }}
                anchorSelect="#email-tooltip"
                place="top"
                content="If you wish to receive invoices on a 
                specific email address, type the email 
                address here. Otherwise, we will use the 
                Company specific email address if it 
                exists. If not, we will use the address 
                associated with this account."
              />
            </div>
          </div>
          <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
            {emailList.map((email, index) => (
              <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                <div className="flex justify-between">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Email Address
                  </label>
                  <button
                    onClick={() => handleEmailDelete(index)}
                    className="ml-2 text-red-500"
                  >
                    <TrashIcon
                      className="h-5 w-5 text-[#EB001B]"
                      aria-hidden="true"
                    />
                  </button>
                </div>
                <input
                  type="text"
                  name="emailInput"
                  id="emailInput"
                  className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                  placeholder="bluebridgellc@mail.com"
                  value={email}
                  onChange={handleEmailInputChange}
                  disabled={!isAdd}
                />
              </div>
            ))}
            {isAdd && (
              <>
                <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900 px-3"
                  >
                    Email Address
                  </label>
                  <input
                    type="text"
                    name="emailInput"
                    id="emailInput"
                    className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="bluebridgellc@mail.com"
                    value={emailInput}
                    onChange={handleEmailInputChange}
                    aria-invalid="true"
                    aria-describedby="email-error"
                  />
                </div>
                <div className="flex justify-end gap-x-2 mx-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={() => {
                      setEmailInput("");
                      setIsAdding(false);
                    }}
                  >
                    Cancel
                  </button>
                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                    onClick={handleSaveClick}
                  >
                    Add
                  </button>
                </div>
              </>
            )}
            {!isAdd && (
              <div className="flex -mx-3 flex-row">
                <button
                  onClick={handleAddClick}
                  type="button"
                  className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  <PlusIcon className="h-5 w-5" aria-hidden="true" />
                </button>
                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                  Add Email Address
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row justify-between  text-sm md:text-base font-normal">
            <div className="flex gap-[10px]">
              <div className="text-base font-semibold">Invoicing Address</div>
              <div className="flex mt-[2px]">
                <QuestionMarkCircleIcon
                  id="address-tooltip"
                  data-tooltip-offset="13"
                  className="h-5 w-5 text-gray-400 "
                  aria-hidden="true"
                />
                <ReactTooltip
                  style={{
                    backgroundColor: "white",
                    color: "#4D5F7A",
                    width: "266px",
                    textAlign: "center",
                    border: "0.5px solid #F3F4F6",
                    borderRadius: "4px",
                    // boxShadow: "0px 2px 4px -2px #0000000D",
                    boxShadow: "0px 4px 6px -1px #0000001A",
                  }}
                  anchorSelect="#address-tooltip"
                  place="top"
                  content='If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                   "Company Details" page.'
                />
              </div>
            </div>
            {isAddAddress && (
              <div className="flex items-center -mt-[8px]">
                <button
                  className="flex self-end border-gradient items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-2 font-medium	rounded-[6px]
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                  onClick={handleEditClick}
                >
                  <Image
                    src={PenBorderIcon}
                    className="h-full w-full"
                    alt="pen"
                  />
                </button>
              </div>
            )}
          </div>

          {!isAddAddress && (
            <div className="flex flex-row">
              <button
                onClick={handleAddAddressClick}
                type="button"
                className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              >
                <PlusIcon className="h-5 w-5" aria-hidden="true" />
              </button>
              <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                Add invoicing Address
              </div>
            </div>
          )}

          {isAddAddress && (
            <div className="flex flex-col px-3 ">
              <div className="isolate -space-y-px rounded-md shadow-sm">
                <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCountry"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal Country
                  </label>
                  <input
                    type="text"
                    name="legalCountry"
                    id="legalCountry"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="United States"
                    value={inputAddressValues.legalCountry}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCity"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal City
                  </label>
                  <input
                    type="text"
                    name="legalCity"
                    id="legalCity"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="San Francisco"
                    value={inputAddressValues.legalCity}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalStreet"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Street
                  </label>
                  <input
                    type="text"
                    name="legalStreet"
                    id="legalStreet"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="Brooklin st. 21 AG 103"
                    value={inputAddressValues.legalStreet}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="zipCode"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Zip Code
                  </label>
                  <input
                    type="text"
                    name="zipCode"
                    id="zipCode"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="204873"
                    value={inputAddressValues.zipCode}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
              </div>
              {isAddressEditing && (
                <div className="flex justify-end gap-x-2 mt-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={handleAddressCancel}
                  >
                    Cancel
                  </button>

                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                    onClick={handleAddressSaveClick}
                  >
                    Save
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
        <table className="min-w-full ">
          <thead className="divide-y divide-gray-300">
            <tr>
              <th
                scope="col"
                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
              >
                Invoice Number
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>

              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Data of Issue
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Value
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                State
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Actions
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y-4 divide-white">
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                01 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 250
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#EB001B] sm:pl-6">
                Unpaid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex  gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                  <button className=" text-sm font-normal px-2 py-1 rounded-md bg-[#22C55E] text-[#FFFFFF]">
                    Pay Now
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                08 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 150
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                16 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 50
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                28 March 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 350
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                20 March 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 408
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
        <nav className="flex items-center justify-between py-4 mx-6 sm:px-0">
          <div className="-mt-px flex w-0 flex-1">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <ArrowLongLeftIcon
                className="mr-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
              Previous
            </a>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <a
              href="#"
              className=" text-[#22C55E] inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium  hover:border-gray-300 hover:text-gray-700"
            >
              1
            </a>
            {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
              aria-current="page"
            >
              2
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              3
            </a>
            <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              ...
            </span>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              8
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              9
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              10
            </a>
          </div>
          <div className="-mt-px flex w-0 flex-1 justify-end">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <ArrowLongRightIcon
                className="ml-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </a>
          </div>
        </nav>
      </div>
    </>
  );
};
export default CompanyInvoicing;



import { Fragment, useRef, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { ExclamationTriangleIcon } from "@heroicons/react/24/outline";

interface ModalProps {
  isOpen: boolean;
  onConfirm: () => void;
  onCancel: () => void;
  handleEmailDelete: (index: number) => void;
  activeEmailIndex: number;
}

const Modal: React.FC<ModalProps> = ({
  isOpen,
  onConfirm,
  onCancel,
  handleEmailDelete,
  activeEmailIndex,
}) => {
  const cancelButtonRef = useRef(null);

  return (
    <Transition.Root show={isOpen} as={Fragment}>
      <Dialog
        as="div"
        className="relative z-10"
        initialFocus={cancelButtonRef}
        onClose={onCancel}
      >
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center sm:items-center sm:p-0">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              enterTo="opacity-100 translate-y-0 sm:scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 sm:scale-100"
              leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
              <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                    <ExclamationTriangleIcon
                      className="h-6 w-6 text-red-600"
                      aria-hidden="true"
                    />
                  </div>
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                    <Dialog.Title
                      as="h3"
                      className="text-base font-semibold leading-6 text-gray-900"
                    >
                      Delete Invoicing Email
                    </Dialog.Title>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        Are you sure you want to delete this invoicing email?
                        This action cannot be undone.
                      </p>
                    </div>
                  </div>
                </div>
                <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                  <button
                    type="button"
                    className="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto"
                    onClick={() => {
                      onConfirm();
                      handleEmailDelete(activeEmailIndex);
                    }}
                  >
                    Delete
                  </button>
                  <button
                    type="button"
                    className="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto"
                    onClick={onCancel}
                    ref={cancelButtonRef}
                  >
                    Cancel
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
  );
};

export default Modal;


import React, { useState } from "react";
import { Tooltip as ReactTooltip } from "react-tooltip";
import "react-tooltip/dist/react-tooltip.css";
import Modal from "./Modal";
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon,
  TrashIcon,
} from "@heroicons/react/20/solid";
import PenBorderIcon from "../public/icons/penBorderIcon.svg";
import Image from "next/image";
import DownloadIcon from "../public/icons/downloadIcon.svg";

const CompanyInvoicing = () => {
  interface MyData {
    number: string;
    date: string;
    value: string;
    state: string;
    actions: string;
  }

  const data: MyData[] = [
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
    {
      number: "#236 322",
      date: "01May 2023",
      value: "€ 250",
      state: "Unpaid",
      actions: "Resend",
    },
  ];
  const [isOpen, setIsOpen] = useState(false);
  const [isAdd, setIsAdding] = useState(false);
  const [activeEmailIndex, setActiveEmailIndex] = useState(-1);
  const [emailInput, setEmailInput] = useState("");
  const [emailList, setEmailList] = useState<string[]>([]);
  const [isAddressEditing, setIsAddressEditing] = useState(false);
  const [isAddAddress, setIsAddingAddress] = useState(false);
  const [inputAddressValues, setInputAddressValues] = useState({
    registrationNumber: "",
    vatId: "",
    legalCountry: "",
    legalCity: "",
    legalStreet: "",
    zipCode: "",
  });
  const handleConfirm = () => {
    handleCloseModal();
  };

  const handleOpenModal = (index: number) => {
    setIsOpen(true);
    setActiveEmailIndex(index);
  };

  const handleCloseModal = () => {
    setIsOpen(false);
  };

  const handleEditClick = () => {
    setIsAddressEditing(true);
  };

  const handleAddClick = () => {
    setIsAdding(true);
  };

  const handleSaveClick = () => {
    if (emailInput) {
      setEmailList((prevList) => [...prevList, emailInput]);
      setEmailInput("");
    }
    setIsAdding(false);
  };

  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmailInput(e.target.value);
  };

  const handleEmailDelete = (index: number) => {
    setEmailList((prevList) => prevList.filter((_, i) => i !== index));
    setIsOpen(false);
  };

  const handleAddAddressClick = () => {
    setIsAddingAddress(true);
  };

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputAddressValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleAddressSaveClick = () => {
    setIsAddressEditing(false);
  };
  const handleAddressCancel = () => {
    setInputAddressValues((prevValues) => ({
      ...prevValues,
    }));
    setIsAddressEditing(false);
  };

  return (
    <>
      <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
            <div className="text-base font-semibold">Invoicing Email</div>
            <div className="flex items-center">
              <QuestionMarkCircleIcon
                className="h-5 w-5 text-gray-400"
                aria-hidden="true"
                id="email-tooltip"
                data-tooltip-offset="13"
              />
              <ReactTooltip
                style={{
                  backgroundColor: "white",
                  color: "#4D5F7A",
                  width: "266px",
                  textAlign: "center",
                  border: "0.5px solid #F3F4F6",
                  borderRadius: "4px",
                  // boxShadow: "0px 2px 4px -2px #0000000D",
                  boxShadow: "0px 4px 6px -1px #0000001A ",
                }}
                anchorSelect="#email-tooltip"
                place="top"
                content="If you wish to receive invoices on a 
                specific email address, type the email 
                address here. Otherwise, we will use the 
                Company specific email address if it 
                exists. If not, we will use the address 
                associated with this account."
              />
            </div>
          </div>
          <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
            {emailList.map((email, index) => (
              <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                <div className="flex justify-between">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Email Address
                  </label>
                  <button
                    onClick={() => handleOpenModal(index)}
                    className="ml-2 text-red-500"
                  >
                    <TrashIcon
                      className="h-5 w-5 text-[#EB001B]"
                      aria-hidden="true"
                    />
                  </button>
                </div>
                <input
                  type="text"
                  name="emailInput"
                  id="emailInput"
                  className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                  placeholder="bluebridgellc@mail.com"
                  value={email}
                  onChange={handleEmailInputChange}
                  disabled={!isAdd}
                />
              </div>
            ))}
            {isAdd && (
              <>
                <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="emailInput"
                    className="block text-xs font-medium text-gray-900 px-3"
                  >
                    Email Address
                  </label>
                  <input
                    type="text"
                    name="emailInput"
                    id="emailInput"
                    className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="bluebridgellc@mail.com"
                    value={emailInput}
                    onChange={handleEmailInputChange}
                    aria-invalid="true"
                    aria-describedby="email-error"
                  />
                </div>
                <div className="flex justify-end gap-x-2 mx-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={() => {
                      setEmailInput("");
                      setIsAdding(false);
                    }}
                  >
                    Cancel
                  </button>
                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                    onClick={handleSaveClick}
                  >
                    Add
                  </button>
                </div>
              </>
            )}
            {!isAdd && (
              <div className="flex -mx-3 flex-row">
                <button
                  onClick={handleAddClick}
                  type="button"
                  className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  <PlusIcon className="h-5 w-5" aria-hidden="true" />
                </button>
                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                  Add Email Address
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className=" py-5 sm:p-6 px-[15px]  flex flex-row justify-between  text-sm md:text-base font-normal">
            <div className="flex gap-[10px]">
              <div className="text-base font-semibold">Invoicing Address</div>
              <div className="flex mt-[2px]">
                <QuestionMarkCircleIcon
                  id="address-tooltip"
                  data-tooltip-offset="13"
                  className="h-5 w-5 text-gray-400 "
                  aria-hidden="true"
                />
                <ReactTooltip
                  style={{
                    backgroundColor: "white",
                    color: "#4D5F7A",
                    width: "266px",
                    textAlign: "center",
                    border: "0.5px solid #F3F4F6",
                    borderRadius: "4px",
                    // boxShadow: "0px 2px 4px -2px #0000000D",
                    boxShadow: "0px 4px 6px -1px #0000001A",
                  }}
                  anchorSelect="#address-tooltip"
                  place="top"
                  content='If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                   "Company Details" page.'
                />
              </div>
            </div>
            {isAddAddress && (
              <div className="flex items-center -mt-[8px]">
                <button
                  className="flex self-end border-gradient items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-2 font-medium	rounded-[6px]
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                  onClick={handleEditClick}
                >
                  <Image
                    src={PenBorderIcon}
                    className="h-full w-full"
                    alt="pen"
                  />
                </button>
              </div>
            )}
          </div>

          {!isAddAddress && (
            <div className="flex flex-row">
              <button
                onClick={handleAddAddressClick}
                type="button"
                className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
              >
                <PlusIcon className="h-5 w-5" aria-hidden="true" />
              </button>
              <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                Add invoicing Address
              </div>
            </div>
          )}

          {isAddAddress && (
            <div className="flex flex-col px-3 ">
              <div className="isolate -space-y-px rounded-md shadow-sm">
                <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCountry"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal Country
                  </label>
                  <input
                    type="text"
                    name="legalCountry"
                    id="legalCountry"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="United States"
                    value={inputAddressValues.legalCountry}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalCity"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Legal City
                  </label>
                  <input
                    type="text"
                    name="legalCity"
                    id="legalCity"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="San Francisco"
                    value={inputAddressValues.legalCity}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="legalStreet"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Street
                  </label>
                  <input
                    type="text"
                    name="legalStreet"
                    id="legalStreet"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="Brooklin st. 21 AG 103"
                    value={inputAddressValues.legalStreet}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
                <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                  <label
                    htmlFor="zipCode"
                    className="block text-xs font-medium text-gray-900"
                  >
                    Zip Code
                  </label>
                  <input
                    type="text"
                    name="zipCode"
                    id="zipCode"
                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                    placeholder="204873"
                    value={inputAddressValues.zipCode}
                    onChange={(e) => handleAddressChange(e)}
                    disabled={!isAddressEditing}
                  />
                </div>
              </div>
              {isAddressEditing && (
                <div className="flex justify-end gap-x-2 mt-3">
                  <button
                    className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    onClick={handleAddressCancel}
                  >
                    Cancel
                  </button>

                  <button
                    className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                    onClick={handleAddressSaveClick}
                  >
                    Save
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
        <table className="min-w-full ">
          <thead className="divide-y divide-gray-300">
            <tr>
              <th
                scope="col"
                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
              >
                Invoice Number
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>

              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Data of Issue
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Value
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                State
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
              >
                Actions
                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y-4 divide-white">
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                01 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 250
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#EB001B] sm:pl-6">
                Unpaid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex  gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                  <button className=" text-sm font-normal px-2 py-1 rounded-md bg-[#22C55E] text-[#FFFFFF]">
                    Pay Now
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                08 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 150
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                16 May 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 50
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                28 March 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 350
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
            <tr className="bg-[#FAFAFD] space-y-1">
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                #236 322
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                20 March 2023
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                € 408
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-[#22C55E] sm:pl-6">
                Paid
              </td>
              <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                <div className="flex gap-x-6">
                  <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                    Resend
                  </button>
                  <button>
                    <Image
                      src={DownloadIcon}
                      className="h-full w-full"
                      alt="download"
                    />
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
        <nav className="flex items-center justify-between py-4 mx-6 sm:px-0">
          <div className="-mt-px flex w-0 flex-1">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              <ArrowLongLeftIcon
                className="mr-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
              Previous
            </a>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <a
              href="#"
              className=" text-[#22C55E] inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium  hover:border-gray-300 hover:text-gray-700"
            >
              1
            </a>
            {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
              aria-current="page"
            >
              2
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              3
            </a>
            <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
              ...
            </span>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              8
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              9
            </a>
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              10
            </a>
          </div>
          <div className="-mt-px flex w-0 flex-1 justify-end">
            <a
              href="#"
              className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
            >
              Next
              <ArrowLongRightIcon
                className="ml-3 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            </a>
          </div>
        </nav>
      </div>
      <Modal
        isOpen={isOpen}
        onConfirm={handleConfirm}
        onCancel={handleCloseModal}
        handleEmailDelete={handleEmailDelete}
        activeEmailIndex={activeEmailIndex}
      />
    </>
  );
};
export default CompanyInvoicing;
function detectCardType(cardNumber: string): string | null {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  }




