"use client";
import React, { useEffect, useState } from "react";
import Search from "./Search";
import Switcher from "./Switcher";
import AppsContainer from "./AppsContainer";
import UserInfo from "./UserInfo";
import { APPS } from "@/public/Data";
import { useTranslation } from "@/app/i18n/client";
import { COMPANIES } from "@/public/Data";
import CompaniesContainer from "./CompaniesContainer";
import { PlusIcon } from "@heroicons/react/20/solid";
interface SidebarProps {
  lng: string;
  isActive: boolean;
  setIsActive: (active: boolean) => void;
  router: any;
  pathName: any;
}

const Sidebar = ({
  lng,
  isActive,
  setIsActive,
  router,
  pathName,
}: SidebarProps) => {
  const [search, setSearch] = useState<string>("");
  const { t } = useTranslation(lng, "client-page");
  const [isSafariMobile, setIsSafariMobile] = useState(false);

  // useEffect(() => {
  //   const checkIsSafariMobile = () => {
  //     const isSafari =
  //       typeof window !== 'undefined' &&
  //       /iPad|iPhone|iPod/.test(navigator.userAgent) &&
  //       !window.hasOwnProperty('safari');

  //     setIsSafariMobile(isSafari);
  //   };

  //   checkIsSafariMobile();
  // }, []);
  // ...

  useEffect(() => {
    const checkIsSafariMobile = () => {
      const isSafariMobile =
        typeof window !== "undefined" &&
        /iPhone|iPad|iPod|Safari/.test(navigator.userAgent) &&
        !/Chrome|CriOS|FxiOS|Firefox/.test(navigator.userAgent);

      setIsSafariMobile(isSafariMobile);
    };

    checkIsSafariMobile();
  }, []);

  // console.log(pathName, "=> pathName");

  return (
    <aside
      className={`sticky pt-8 top-0 left-0 sm:w-[320px] relative flex flex-col justify-between  h-screen shrink-0 sm:block bg-sideBarBg shadow-right hideScrollbar
      ${
        isActive
          ? "w-full h-full transition-all duration-200 overflow-hidden"
          : "w-[0%] transition-all duration-200"
      }`}
    >
      <div className={`overflow-hidden`}>
        {/* <h2 className="text-center sm:text-left text-base md:text-lg font-semibold px-5">
          {t("applications")}
        </h2> */}
        <div className="flex items-center justify-between mr-4">
        <h2 className="text-center sm:text-left text-base md:text-lg font-semibold px-5">
          Companies
        </h2>
        <button
          type="button"
          className="flex items-center justify-center w-[46px] h-[46px] rounded-md p-1.5 text-white btn-plus-company  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        >
          <PlusIcon className="h-5 w-5" aria-hidden="true" />
        </button>
        </div>

        <div className="flex flex-col gap-y-5">
          <div className="flex flex-col gap-y-5 px-5 mt-[20px]">
            {/* <Search setSearch={setSearch} search={search} lng={lng} />
            <Switcher lng={lng} /> */}
            {pathName === "/en/companies/1" ||
            pathName === "/en/companies/2" ||
            pathName === "/ua/companies/1" ||
            pathName === "/ua/companies/2" ? (
              <CompaniesContainer
                isActive={isActive}
                setIsActive={setIsActive}
                companies={COMPANIES}
                search={search}
                lng={lng}
              />
            ) : (
              <AppsContainer
                isActive={isActive}
                setIsActive={setIsActive}
                apps={APPS}
                search={search}
                lng={lng}
              />
            )}
          </div>
        </div>
      </div>
      <div
        className={`sm:hidden   ${isSafariMobile ? "mb-[142px]" : "mb-[65px]"}`}
      >
        <UserInfo
          pathName={pathName}
          router={router}
          t={t}
          isSideBar={isActive}
          lng={lng}
        />
      </div>
    </aside>
  );
};

export default Sidebar;
