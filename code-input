/* eslint-disable arrow-body-style */
import { LoadingButton } from '@mui/lab';
import { Stack, FormLabel, Grid, Typography, Box, Alert, MenuItem } from '@mui/material';
import { usePrisonerContext } from 'features/DataManagement/Prisoners/Context/PrisonerContext';
import { useCreatePrisonersNews, useEditPrisonersNews } from '../Hooks';
import { Form, FormikProvider, useFormik } from 'formik';
import { useLocales } from 'locales';
import { cloneDeep, map } from 'lodash';
import { useSnackbar } from 'notistack';
import { useEffect } from 'react';
import { IPrisonersNewsPayload } from 'Shared/@types/data';
import { FormikSubmitFunction } from 'Shared/@types/formik';
import {
  RFCheckBox,
  RFDatePickerField,
  RFDatePickerFieldJalali,
  RFSelect,
  RFTextField,
} from 'Shared/components/hook-formik';
import { RFNoteEditor } from 'Shared/components/hook-formik/RFNoteEditor';
import { SelectSecondLanguage } from '../../../SelectLanguage';
import { useAuthContext } from 'Shared/Services/auth/useAuthContext';
import { DateType, DateFormat } from 'Shared/Constant/data';
import { format as jalaliFormat } from 'date-fns-jalali';
import { format } from 'date-fns';
import { useParams } from 'react-router';

type FormValuesProps = IPrisonersNewsPayload & {
  afterSubmit?: string;
  title?: string;
  prisoner_id: number | null;
};

type Props = {
  id?: number;
  data: IPrisonersNewsPayload;
  refetchPrisonersNews?: any;
  onClose: VoidFunction;
};

export const AddNews = ({ data, id, refetchPrisonersNews, onClose }: Props) => {
  const { translate, currentLang } = useLocales();
  const isFarsi = currentLang.value == 'fa';
  const { enqueueSnackbar } = useSnackbar();
  const { user } = useAuthContext();
  const { id: prisoner_id }: any = useParams();

  const {
    primaryLang,
    secondaryLang,
    secondaryLangIndex,
    primaryLangIndex,
    onSetLanguages,
    onSetSecondaryLangIndex,
    onSetPrimaryLangIndex,
    onSetSecondaryLang,
  } = usePrisonerContext();

  const { mutate: createPrisonersNews } = useCreatePrisonersNews();
  const { mutate: editPrisonersNews } = useEditPrisonersNews();
  const onSubmit: FormikSubmitFunction<FormValuesProps> = (
    values,
    { setErrors, setSubmitting }
  ) => {
    const payload = cloneDeep(values);
    payload.translations = [];
    payload.prisoner_id = prisoner_id;

    map(values.translations, (translate) => {

      translate.title = translate.title || '';
      translate.hyperlink = translate.hyperlink || '';
        if (translate.language == primaryLang.name) payload.translations.push(translate);
      if (translate.language == secondaryLang) payload.translations.push(translate);
    });


    if (
      (!payload.translations[0].title && !payload.translations[0].hyperlink) &&
      (!payload.translations[1].title && !payload.translations[1].hyperlink)
    ) {
      setSubmitting(false);
      return setErrors({ afterSubmit: 'addInputValue' });
    }
    
    if (id) {
      editPrisonersNews(
        { id: Number(id), payload: payload },
        {
          onSuccess: () => {
            refetchPrisonersNews();
            enqueueSnackbar(translate('updateSuccess'));
            onClose();
            setSubmitting(false);
          },
          onError: (error) => {
            setSubmitting(false);
            setErrors({ afterSubmit: error.message });
          },
        }
      );
    } else {
      if (user?.role === 'EDITOR') {
        setSubmitting(false);
      } else {
        createPrisonersNews(payload, {
          onSuccess: () => {
            refetchPrisonersNews();
            enqueueSnackbar(translate('createSuccess'));
            onClose();
            setSubmitting(false);
          },
          onError: (error) => {
            setSubmitting(false);
            setErrors({ afterSubmit: error.message });
          },
        });
      }
    }
  };
  const formik = useFormik<FormValuesProps>({
    initialValues: data,
    enableReinitialize: true,
    validateOnBlur: false,
    validateOnChange: false,
    validateOnMount: false,
    onSubmit,
  });
  const { errors, isSubmitting, values, resetForm } = formik;

  useEffect(() => {
    if (values.translations) {
      const langs: any = [];

      map(values.translations, (translate, index) => {
        if (translate.language === primaryLang.name) {
          onSetPrimaryLangIndex(index);
        }
        if (translate.language === secondaryLang) {
          onSetSecondaryLangIndex(index);
        }
        translate.language !== primaryLang.name && langs.push(translate.language);
      });
      onSetLanguages(langs);
    }
  }, [values.translations]);

  const handleSelectSecondLang = (language: string) => {
    onSetSecondaryLang(language);
    if (values.translations) {
      map(values.translations, (translate, index) => {
        if (translate.language === language) {
          onSetSecondaryLangIndex(index);
        }
      });
    }
  };

  const onResetForm = () => {
    resetForm();
  };

  return (
    <FormikProvider value={formik}>
      <Form noValidate autoComplete="off">
        <Box>
          {!!errors.afterSubmit && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {errors.afterSubmit}
            </Alert>
          )}
          <Grid container spacing={4} mb={4}>
            <Grid item xs={6}>
              <SelectSecondLanguage handleSelect={handleSelectSecondLang} />
            </Grid>
            <Grid item xs={6}>
              <Typography
                textAlign="right"
                sx={{ color: 'black', fontWeight: 'bold', fontFamily: 'BTrafficBold' }}
              >
                زبان فارسی
              </Typography>
            </Grid>
          </Grid>

          <Grid container dir="ltr" spacing={2}>
            <Grid item xs={6} my={1}>
              <FormLabel
                sx={{
                  color: 'black',
                  fontWeight: 'bold',
                  fontSize: '14px',
                  px: 0.5,
                }}
              >
                {translate('title')}
              </FormLabel>
              <RFTextField
                size="small"
                name={`translations[${secondaryLangIndex}].title`}
                sx={{ mt: 0.6 }}
              />
            </Grid>
            <Grid item xs={6} my={1} dir="rtl">
              <FormLabel
                sx={{
                  color: 'black',
                  fontFamily: 'BTraffic',
                  fontWeight: 'bold',
                  fontSize: '16px',
                  px: 0.5,
                }}
              >
                عنوان
              </FormLabel>
              <RFTextField
                size="small"
                name={`translations[${primaryLangIndex}].title`}
                sx={{ mt: 0.25 }}
              />
            </Grid>
          </Grid>
          {/* date */}
          <Grid container spacing={1}>
            <Grid item xs={12} sm={2} my={1}>
              <FormLabel
                sx={{
                  color: 'black',
                  fontFamily: isFarsi ? 'BTraffic' : '',
                  fontWeight: 'bold',
                  fontSize: isFarsi ? '16px' : '14px',
                  px: 0.5,
                }}
              >
                {translate('dateType')}
              </FormLabel>
              <RFSelect
                fullWidth
                name="dateType"
                size="small"
                sx={{
                  mt: 0.25,
                }}
              >
                {map(DateType(currentLang.value), (option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.name}
                  </MenuItem>
                ))}
              </RFSelect>
            </Grid>
            <Grid item xs={12} sm={2} my={1}>
              <FormLabel
                sx={{
                  color: 'black',
                  fontFamily: isFarsi ? 'BTraffic' : '',
                  fontWeight: 'bold',
                  fontSize: isFarsi ? '16px' : '14px',
                  px: 0.5,
                }}
              >
                {translate('dateFormat')}
              </FormLabel>
              <RFSelect
                fullWidth
                name="displayFormatDate"
                size="small"
                sx={{
                  mt: 0.25,
                }}
              >
                {map(DateFormat(currentLang.value), (option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.name}
                  </MenuItem>
                ))}
              </RFSelect>
            </Grid>
            <Grid item xs={12} sm={8} my={1}>
              <FormLabel
                sx={{
                  color: 'black',
                  fontFamily: isFarsi ? 'BTraffic' : '',
                  fontWeight: 'bold',
                  fontSize: isFarsi ? '16px' : '14px',
                  px: 0.5,
                }}
              >
                {translate('newsDate')}
              </FormLabel>
              <Box
                display="flex"
                sx={{
                  mt: 0.25,
                }}
              >
                {values.dateType == 'christian' && (
                  <RFDatePickerField
                    size="small"
                    name="newsDate"
                    formattedDate={
                      values.newsDate
                        ? jalaliFormat(new Date(values.newsDate as Date), 'yyyy MMMM d')
                        : ''
                    }
                  />
                )}
                {values.dateType !== 'christian' && (
                  <RFDatePickerFieldJalali
                    size="small"
                    name="newsDate"
                    formattedDate={
                      values.newsDate
                        ? format(new Date(values.newsDate as Date), 'dd MMM yyyy')
                        : ''
                    }
                  />
                )}
                <Box width={isFarsi ? '160px' : '230px'} mx={2}>
                  <RFCheckBox
                    name="approximateDate"
                    label={
                      <FormLabel
                        sx={{
                          color: 'black',
                          fontFamily: isFarsi ? 'BTraffic' : '',
                          fontWeight: 'bold',
                          fontSize: isFarsi ? '16px' : '14px',
                          px: 0,
                        }}
                      >
                        {translate('approximateDate')}
                      </FormLabel>
                    }
                  />
                </Box>
              </Box>
            </Grid>
          </Grid>
          <Grid container spacing={2} direction={isFarsi ? 'row-reverse' : 'row'}>
            <Grid item xs={6}>
              <Box dir="ltr">
                <FormLabel sx={{ color: 'black', fontWeight: 'bold', fontSize: '14px', px: 0.5 }}>
                  {translate('explanation')}
                </FormLabel>
              </Box>
              {map(values.translations, (translate, index) => {
                return index === secondaryLangIndex ? (
                  <RFNoteEditor
                    key={index}
                    id={`minimal-quill-${secondaryLangIndex}${index}`}
                    name={`translations[${secondaryLangIndex}].hyperlink`}
                    value={values.translations[secondaryLangIndex].hyperlink}
                    sx={{
                      mt: 0.6,
                      mb: 1,
                    }}
                  />
                ) : (
                  ''
                );
              })}
            </Grid>
            <Grid item xs={6}>
              <Box dir="rtl">
                <FormLabel
                  sx={{
                    color: 'black',
                    fontFamily: 'BTraffic',
                    fontWeight: 'bold',
                    fontSize: '16px',
                    px: 0.5,
                  }}
                >
                  توضیح
                </FormLabel>
              </Box>
              {map(values.translations, (translate, index) =>
                index === primaryLangIndex ? (
                  <RFNoteEditor
                    key={index}
                    id={`minimal-quill-${primaryLangIndex}${index}`}
                    name={`translations[${primaryLangIndex}].hyperlink`}
                    value={values.translations[primaryLangIndex].hyperlink}
                    sx={{
                      mt: 0.25,
                      mb: 2,
                    }}
                  />
                ) : (
                  ''
                )
              )}
            </Grid>
          </Grid>
        </Box>
        <Stack direction="row" spacing={2} mt={2}>
          <LoadingButton
            size="medium"
            color="inherit"
            variant="contained"
            onClick={() => {
              onResetForm();
              onClose();
            }}
            sx={{
              px: 4,
              borderRadius: '4px',
              fontFamily: isFarsi ? 'BTraffic' : '',
              fontSize: isFarsi ? '17px' : '15px',
            }}
          >
            {translate('back')}
          </LoadingButton>
          <LoadingButton
            size="medium"
            type="submit"
            variant="contained"
            loading={isSubmitting}
            sx={{
              px: 4,
              borderRadius: '4px',
              fontFamily: isFarsi ? 'BTraffic' : '',
              fontSize: isFarsi ? '17px' : '15px',
            }}
          >
            {id ? translate('updateEvent') : translate('saveEvent')}
          </LoadingButton>
        </Stack>
      </Form>
    </FormikProvider>
  );
};
