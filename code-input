import React, { useState } from 'react';
import { Tooltip as ReactTooltip } from 'react-tooltip';
import 'react-tooltip/dist/react-tooltip.css';
import Modal from './Modal';
import {
  ArrowLongLeftIcon,
  ArrowLongRightIcon,
  PlusIcon,
  QuestionMarkCircleIcon,
  TrashIcon,
} from '@heroicons/react/20/solid';
import PenBorderIcon from '../public/icons/penBorderIcon.svg';
import Image from 'next/image';
import DownloadIcon from '../public/icons/downloadIcon.svg';

import { dataInvoicing } from '@/public/Data';

const CompanyInvoicing = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isAdd, setIsAdding] = useState(false);
  const [activeEmailIndex, setActiveEmailIndex] = useState(-1);
  const [emailInput, setEmailInput] = useState('');
  const [emailList, setEmailList] = useState<string[]>([]);
  const [isAddressEditing, setIsAddressEditing] = useState(false);
  const [isAddAddress, setIsAddingAddress] = useState(false);
  const [inputAddressValues, setInputAddressValues] = useState({
    registrationNumber: '',
    vatId: '',
    legalCountry: '',
    legalCity: '',
    legalStreet: '',
    zipCode: '',
  });

  const handleConfirm = () => {
    handleCloseModal();
  };

  const handleOpenModal = (index: number) => {
    setIsOpen(true);
    setActiveEmailIndex(index);
  };

  const handleCloseModal = () => {
    setIsOpen(false);
  };

  const handleEditClick = () => {
    setIsAddressEditing(true);
  };

  const handleAddClick = () => {
    setIsAdding(true);
  };

  const handleSaveClick = () => {
    if (!isValidEmail(emailInput)) {
      setEmailInput('');
      setIsAdding(false);
      return;
    }

    setEmailList((prevList) => [...prevList, emailInput]);
    setEmailInput('');
    setIsAdding(false);
  };

  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmailInput(e.target.value);
  };

  const handleEmailDelete = (index: number) => {
    setEmailList((prevList) => prevList.filter((_, i) => i !== index));
    setIsOpen(false);
  };

  const handleAddAddressClick = () => {
    setIsAddingAddress(true);
  };

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setInputAddressValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleAddressSaveClick = () => {
    setIsAddressEditing(false);
  };

  const handleAddressCancel = () => {
    setInputAddressValues((prevValues) => ({
      ...prevValues,
    }));
    setIsAddressEditing(false);
  };

  const isValidEmail = (email: string) => {
    const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
    return emailRegex.test(email);
  };


    return (
        <>
            <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2">
                <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
                    <div className=" py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
                        <div className="text-base font-semibold">
                            Invoicing Email
                        </div>
                        <div className="flex items-center">
                            <QuestionMarkCircleIcon
                                className="h-5 w-5 text-gray-400"
                                aria-hidden="true"
                                id="email-tooltip"
                                data-tooltip-offset="13"
                            />
                            <ReactTooltip
                                style={{
                                    backgroundColor: 'white',
                                    color: '#4D5F7A',
                                    width: '266px',
                                    textAlign: 'center',
                                    border: '0.5px solid #F3F4F6',
                                    borderRadius: '4px',
                                    // boxShadow: "0px 2px 4px -2px #0000000D",
                                    boxShadow: '0px 4px 6px -1px #0000001A ',
                                }}
                                anchorSelect="#email-tooltip"
                                place="top"
                                content="If you wish to receive invoices on a 
                specific email address, type the email 
                address here. Otherwise, we will use the 
                Company specific email address if it 
                exists. If not, we will use the address 
                associated with this account."
                            />
                        </div>
                    </div>
                    <div className="flex mx-3 flex-col gap-y-3 text-sm md:text-base font-normal">
                        {emailList.map((email, index) => (
                            <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                <div className="flex justify-between">
                                    <label
                                        htmlFor="emailInput"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Email Address
                                    </label>
                                    <button
                                        onClick={() => handleOpenModal(index)}
                                        className="ml-2 text-red-500"
                                    >
                                        <TrashIcon
                                            className="h-5 w-5 text-[#EB001B]"
                                            aria-hidden="true"
                                        />
                                    </button>
                                </div>
                                <input
                                    type="text"
                                    name="emailInput"
                                    id="emailInput"
                                    className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                    placeholder="bluebridgellc@mail.com"
                                    value={email}
                                    onChange={handleEmailInputChange}
                                    disabled={!isAdd}
                                />
                            </div>
                        ))}
                        {isAdd && (
                            <>
                                <div className="relative rounded-md  px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="emailInput"
                                        className="block text-xs font-medium text-gray-900 px-3"
                                    >
                                        Email Address
                                    </label>
                                    <input
                                        type="text"
                                        name="emailInput"
                                        id="emailInput"
                                        className="block px-3 w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="bluebridgellc@mail.com"
                                        value={emailInput}
                                        onChange={handleEmailInputChange}
                                        aria-invalid="true"
                                        aria-describedby="email-error"
                                    />
                                </div>
                                <div className="flex justify-end gap-x-2 mx-3">
                                    <button
                                        className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                        onClick={() => {
                                            setEmailInput('');
                                            setIsAdding(false);
                                        }}
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]"
                                        onClick={handleSaveClick}
                                    >
                                        Add
                                    </button>
                                </div>
                            </>
                        )}
                        {!isAdd && (
                            <div className="flex -mx-3 flex-row">
                                <button
                                    onClick={handleAddClick}
                                    type="button"
                                    className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                >
                                    <PlusIcon
                                        className="h-5 w-5"
                                        aria-hidden="true"
                                    />
                                </button>
                                <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                                    Add Email Address
                                </div>
                            </div>
                        )}
                    </div>
                </div>
                <div className="overflow-hidden h-[398px] rounded-3xl border border-gray-200 shadow mt-6">
                    <div className=" py-5 sm:p-6 px-[15px]  flex flex-row justify-between  text-sm md:text-base font-normal">
                        <div className="flex gap-[10px]">
                            <div className="text-base font-semibold">
                                Invoicing Address
                            </div>
                            <div className="flex mt-[2px]">
                                <QuestionMarkCircleIcon
                                    id="address-tooltip"
                                    data-tooltip-offset="13"
                                    className="h-5 w-5 text-gray-400 "
                                    aria-hidden="true"
                                />
                                <ReactTooltip
                                    style={{
                                        backgroundColor: 'white',
                                        color: '#4D5F7A',
                                        width: '266px',
                                        textAlign: 'center',
                                        border: '0.5px solid #F3F4F6',
                                        borderRadius: '4px',
                                        // boxShadow: "0px 2px 4px -2px #0000000D",
                                        boxShadow: '0px 4px 6px -1px #0000001A',
                                    }}
                                    anchorSelect="#address-tooltip"
                                    place="top"
                                    content='If you need specific address for invoices,
                  please fill it in here. If this fields are 
                  empty, we will use the information from
                   "Company Details" page.'
                                />
                            </div>
                        </div>
                        {isAddAddress && (
                            <div className="flex items-center -mt-[8px]">
                                <button
                                    className="flex self-end border-gradient items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-2 font-medium	rounded-[6px]
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                    onClick={handleEditClick}
                                >
                                    <Image
                                        src={PenBorderIcon}
                                        className="h-full w-full"
                                        alt="pen"
                                    />
                                </button>
                            </div>
                        )}
                    </div>

                    {!isAddAddress && (
                        <div className="flex flex-row">
                            <button
                                onClick={handleAddAddressClick}
                                type="button"
                                className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                            >
                                <PlusIcon
                                    className="h-5 w-5"
                                    aria-hidden="true"
                                />
                            </button>
                            <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
                                Add invoicing Address
                            </div>
                        </div>
                    )}

                    {isAddAddress && (
                        <div className="flex flex-col px-3 ">
                            <div className="isolate -space-y-px rounded-md shadow-sm">
                                <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalCountry"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Legal Country
                                    </label>
                                    <input
                                        type="text"
                                        name="legalCountry"
                                        id="legalCountry"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="United States"
                                        value={inputAddressValues.legalCountry}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalCity"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Legal City
                                    </label>
                                    <input
                                        type="text"
                                        name="legalCity"
                                        id="legalCity"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="San Francisco"
                                        value={inputAddressValues.legalCity}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative -none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="legalStreet"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Street
                                    </label>
                                    <input
                                        type="text"
                                        name="legalStreet"
                                        id="legalStreet"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="Brooklin st. 21 AG 103"
                                        value={inputAddressValues.legalStreet}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                                <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                                    <label
                                        htmlFor="zipCode"
                                        className="block text-xs font-medium text-gray-900"
                                    >
                                        Zip Code
                                    </label>
                                    <input
                                        type="text"
                                        name="zipCode"
                                        id="zipCode"
                                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                                        placeholder="204873"
                                        value={inputAddressValues.zipCode}
                                        onChange={(e) => handleAddressChange(e)}
                                        disabled={!isAddressEditing}
                                    />
                                </div>
                            </div>
                            {isAddressEditing && (
                                <div className="flex justify-end gap-x-2 mt-3">
                                    <button
                                        className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal  shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                        onClick={handleAddressCancel}
                                    >
                                        Cancel
                                    </button>

                                    <button
                                        className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF]
                             md:text-sm sm:text-xs font-normal  hover:bg-[#22C55E]"
                                        onClick={handleAddressSaveClick}
                                    >
                                        Save
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            <div className="overflow-hidden rounded-3xl border border-gray-200 shadow mt-6 px-3 py-3">
                <table className="min-w-full ">
                    <thead className="divide-y divide-gray-300">
                        <tr>
                            <th
                                scope="col"
                                className="py-3.5  pl-4 pr-3 text-center text-sm font-bold text-gray-900"
                            >
                                Invoice Number
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>

                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Data of Issue
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Value
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                State
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                            <th
                                scope="col"
                                className="px-3 py-3.5 text-center text-sm font-bold text-gray-900"
                            >
                                Actions
                                <hr className="mt-[3px] border-[1px] border-[#8896AB] opacity-50" />
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y-4 divide-white">
                        {dataInvoicing.map((item, index) => (
                            <tr
                                key={index}
                                className={`bg-[#FAFAFD] space-y-1 ${
                                    item.state === 'Paid'
                                        ? 'text-[#22C55E]'
                                        : 'text-[#EB001B]'
                                }`}
                            >
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.number}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.date}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    {item.value}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium  sm:pl-6">
                                    {item.state}
                                </td>
                                <td className="whitespace-nowrap text-base py-4 pl-4 pr-3 sm:text-xs md:text-sm font-medium text-gray-900 sm:pl-6">
                                    <div className="flex gap-x-6">
                                        <button className="border-[1px] text-sm font-normal px-2 py-1 rounded-md border-[#22C55E] text-[#22C55E]">
                                            {item.actions}
                                        </button>
                                        <button>
                                            <Image
                                                src={DownloadIcon}
                                                className="h-full w-full"
                                                alt="download"
                                            />
                                        </button>
                                        {item.state === 'Unpaid' && (
                                            <button className="text-sm font-normal px-2 py-1 rounded-md bg-[#22C55E] text-[#FFFFFF]">
                                                Pay Now
                                            </button>
                                        )}
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
                <nav className="flex items-center justify-between py-4 mx-6 sm:px-0">
                    <div className="-mt-px flex w-0 flex-1">
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            <ArrowLongLeftIcon
                                className="mr-3 h-5 w-5 text-gray-400"
                                aria-hidden="true"
                            />
                            Previous
                        </a>
                    </div>
                    <div className="hidden md:-mt-px md:flex">
                        <a
                            href="#"
                            className=" text-[#22C55E] inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium  hover:border-gray-300 hover:text-gray-700"
                        >
                            1
                        </a>
                        {/* Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" */}
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                            aria-current="page"
                        >
                            2
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            3
                        </a>
                        <span className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500">
                            ...
                        </span>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            8
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            9
                        </a>
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            10
                        </a>
                    </div>
                    <div className="-mt-px flex w-0 flex-1 justify-end">
                        <a
                            href="#"
                            className="inline-flex items-center border-t-2 border-transparent pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
                        >
                            Next
                            <ArrowLongRightIcon
                                className="ml-3 h-5 w-5 text-gray-400"
                                aria-hidden="true"
                            />
                        </a>
                    </div>
                </nav>
            </div>
            <Modal
                isOpen={isOpen}
                onConfirm={handleConfirm}
                onCancel={handleCloseModal}
                handleEmailDelete={handleEmailDelete}
                activeEmailIndex={activeEmailIndex}
            />
        </>
    );
};
export default CompanyInvoicing;



///Company Invoicing with validation










///////


import React, { useState } from "react";
import { COMPANIES } from "@/public/Data";
import { CompanyType } from "@/components/CompanyItem";
import Image from "next/image";
import { useTranslation } from "@/app/i18n";
import Tabs, { TabType } from "@/components/Tabs";
import AppInfo from "@/components/AppInfo";
import CompanyInfo from "@/components/CompanyInfo";

const Company = async ({ params: { lng, companies } }: { params: any }) => {
  const { t } = await useTranslation(lng);
  const tabs: TabType[] = [
    {
      id: "1",
      name: t("Company Details"),
      href: "#",
      current: true,
    },
    {
      id: "2",
      name: t("Payment Methods"),
      href: "#",
      current: false,
    },
    {
      id: "3",
      name: t("User Roles"),
      href: "#",
      current: false,
    },
    {
      id: "4",
      name: t("Invoices"),
      href: "#",
      current: false,
    },
  ];

  const [isEditingImage, setIsEditingImage] = useState(false);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);

  const handleEditImage = (): void => {
    setIsEditingImage(true);
  };

  const handleSaveImage = (): void => {
    // Додайте тут логіку для збереження завантаженого зображення
    setIsEditingImage(false);
  };

  const handleCancelImageEdit = (): void => {
    setIsEditingImage(false);
    setUploadedImage(null);
  };

  const data = COMPANIES.find((item: CompanyType) => item.id === companies);

  return (
    <div className="pt-10 lg:pt-20 flex flex-col">
      <div className="flex gap-5 lg:gap-7 mb-24">
        <div className="h-[64px] min-w-[64px] lg:h-[120px] lg:min-w-[120px] bg-gradient-to-r from-[#F2F2F2] to-[#ECECEC] rounded-md">
          {isEditingImage ? (
            <div className="relative flex items-center justify-center h-full w-full">
              {/* Додайте тут логіку для відображення завантаженого зображення */}
              {uploadedImage ? (
                <img
                  src={uploadedImage}
                  className="h-full w-full object-cover rounded-md"
                  alt={data?.title}
                />
              ) : (
                <div className="flex items-center justify-center h-full w-full text-gray-400">
                  {/* Додайте тут іконку для завантаження зображення */}
                </div>
              )}
            </div>
          ) : (
            data?.icon && (
              <Image
                src={data?.icon}
                className="h-full w-full"
                alt={data.title}
              />
            )
          )}
        </div>

        <div className="flex flex-col  gap-y-1 md:gap-y-3 justify-between  mt-2 lg:mt-0">
          <div className="flex flex-row justify-between ">
            <h4 className="font-semibold text-base md:text-xl lg-text:2xl mr-[10vw]">
              {data?.title}
            </h4>
            <div className="flex gap-x-5  -mt-2   gap-[6px]">
              {isEditingImage ? (
                <>
                  <button
                    className="bg-[#4F46E5] flex items-center  w-[36px] h-[36px] text-white text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                    onClick={handleSaveImage}
                  >
                    {/* Додайте тут іконку для збереження */}
                  </button>
                  <button
                    className="border-[1px] border-[#B3B1B6] flex items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
         focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                    onClick={handleCancelImageEdit}
                  >
                    {/* Додайте тут іконку для скасування */}
                  </button>
                </>
              ) : (
                <button
                  className="border-[1px]  border-[#B3B1B6] flex items-center  w-[36px] h-[36px] text-xs md:text-sm py-2 px-3 font-medium	rounded-[6px]
         focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                  onClick={handleEditImage}
                >
                  {/* Додайте тут іконку для редагування */}
                </button>
              )}
            </div>
          </div>
          <p className="font-normal text-sm md:text-base sm:text-sm lg:text-lg text-gray500">
            Company Legal Name
          </p>
          <div className="flex flex-col mt-[10px] gap-y-[10px] ">
            <div className="flex flex-row justify-between">
              <div className="flex  gap-[10px]">
                <div>{emailIcon}</div>
                <div className="font-normal text-base md:text-sm text-gray-400">
                  Bluebridgellcl@mail.com
                </div>
              </div>
              <div className="text-center text-xs py-[2px] px-[10px] rounded-[6px] bg-[#DEF7EC] text-[#2A3342]">
                Verified
              </div>
            </div>
            <div className="flex flex-row justify-between">
              <div className="flex flex-row gap-[10px]">
                <div>{phoneIcon}</div>
                <div className="text-base md:text-sm text-gray-400">
                  +1 (555) 987-6543
                </div>
              </div>
              <div className=" text-xs py-[2px] px-[10px] text-center rounded-[6px] bg-[#FCE8F3] text-[#99154B]">
                Not Verified
              </div>
            </div>
          </div>
        </div>
      </div>

      <CompanyInfo tabsData={tabs} lng={lng} />
    </div>
  );
};

export default Company;

import Image from "next/image";
import React, { useState } from "react";
import {
  PlusIcon,
  TrashIcon,
  CheckCircleIcon,
} from "@heroicons/react/20/solid";
import VisaIcon from "../public/icons/visaIcon.svg";
import MasterCardIcon from "../public/icons/masterCardIcon.svg";

interface Card {
  cardNumber: string;
  cardHolder: string;
  cardExpirationDate: string;
  cardCvc: string;
}

const CompanyPayment = (): JSX.Element => {
  const [isAddCard, setIsAddingCard] = useState(false);
  const [inputCardValues, setInputCardValues] = useState<Card>({
    cardNumber: "",
    cardHolder: "",
    cardExpirationDate: "",
    cardCvc: "",
  });
  const [cardList, setCardList] = useState<Card[]>([]);
  const [zipCode, setZipCode] = useState("");
  const [activeCardIndex, setActiveCardIndex] = useState<number | null>(null);

  const handleCardChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    const { name, value } = e.target;
    setInputCardValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleActiveCard = (index: number): void => {
    setActiveCardIndex(index);
  };
  

  const handleZipCodeChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ): void => {
    setZipCode(e.target.value);
  };

  const handleAddCardClick = (): void => {
    setIsAddingCard(true);
  };

  const handleCardCancel = (): void => {
    setIsAddingCard(false);
  };

  const handleCardSaveClick = (): void => {
    setCardList((prevList) => [...prevList, inputCardValues]);
    setInputCardValues({
      cardNumber: "",
      cardHolder: "",
      cardExpirationDate: "",
      cardCvc: "",
    });
    setIsAddingCard(false);
  };

  const maskCardNumber = (cardNumber: string): string => {
    const formattedCardNumber = cardNumber.replace(/\s/g, ""); // Видаляємо всі пробіли з номера картки
    const lastFourDigits = formattedCardNumber.slice(-4); // Останні 4 цифри
    const maskedDigits = "*".repeat(formattedCardNumber.length - 4); // Масковані цифри
    const chunkedNumbers = maskedDigits.match(/.{1,4}/g); // Розбиваємо масковані цифри на групи по 4 символи
    if (chunkedNumbers) {
      return chunkedNumbers.join(" ") + lastFourDigits; // Додаємо пробіл між групами та додаємо останні 4 цифри
    }
    return formattedCardNumber; // Повертаємо номер картки без форматування, якщо розбивка на групи не вдалась
  };
  

  const detectCardType = (cardNumber: string): string | null => {
    const re: { [key: string]: RegExp } = {
      visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
      mastercard: /^5[1-5][0-9]{14}$/,
    };

    for (const key in re) {
      if (re[key].test(cardNumber)) {
        return key;
      }
    }

    return null;
  };

  const handleDeleteCard = (index: number): void => {
    setCardList((prevList) => {
      const updatedList = [...prevList];
      updatedList.splice(index, 1);
      return updatedList;
    });
  };

  return (
    <div className="isolate mx-auto px-0.5 pb-0.5 grid max-w-md grid-cols-1 gap-7 lg:mx-0 lg:max-w-none lg:grid-cols-2 ">
      <div className="overflow-hidden h-[440px] rounded-3xl border border-gray-200 shadow mt-6">
        <div className="py-5 sm:p-6 px-[15px]  flex flex-row gap-[10px] text-sm md:text-base font-normal">
          <div className="text-base font-semibold text-[#232429s]">
            Credit Cards
          </div>
        </div>
        {cardList.length > 0 && (
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            {cardList.map((card, index) => (
              <div
                onClick={() => handleActiveCard(index)}
                key={index}
                className={`flex items-center justify-around py-3 ${
                  activeCardIndex === index
                    ? "border-[1px] border-[#22C55E] rounded-[10px] border-opacity-50"
                    : ""
                }`}
              >
                <div className="flex items-center gap-x-12">
                  <div className="text-gray-500">
                    {detectCardType(cardList[index].cardNumber) === "visa" ? (
                      <div className="w-full h-full">
                        <Image
                          src={VisaIcon}
                          alt="visa"
                          width={30}
                          height={23.36}
                        />
                      </div>
                    ) : (
                      <div className="w-full h-full">
                        <Image
                          src={MasterCardIcon}
                          alt="mastercard"
                          width={30}
                          height={23.36}
                        />
                      </div>
                    )}
                  </div>
                  <div className="text-gray-900 text-base font-semibold">
                    {maskCardNumber(cardList[index].cardNumber)}
                  </div>
                  {activeCardIndex === index ? (
                    <div className="flex items-center w-[25px] h-[25px] ml-[12px]">
                      <CheckCircleIcon
                        className="h-full w-full text-green-400 "
                        aria-hidden="true"
                      />
                    </div>
                  ) : (
                    <button
                      onClick={() => handleDeleteCard(index)}
                      className="bg-[#EB001B] flex items-center w-[36px] h-[36px] text-white text-xs md:text-sm py-2 px-3 font-medium rounded-[6px] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                    >
                      <TrashIcon
                        className="h-5 w-5 text-[#FFFFFF]"
                        aria-hidden="true"
                      />
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
        <div className="flex flex-row">
          <button
            onClick={handleAddCardClick}
            type="button"
            className="ml-[18px] mb-[10px] rounded-md bg-[#22C55E] border-4 border-[#BBF7D0] p-1.5 text-white shadow-sm hover:bg-[#22C55E] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            <PlusIcon className="h-5 w-5" aria-hidden="true" />
          </button>
          <div className="mt-[10px] ml-[25px] text-sm font-medium text-gray-600">
            Add New Card
          </div>
        </div>
      </div>
      {isAddCard && (
        <div className="overflow-hidden h-[440px] rounded-3xl border border-gray-200 shadow mt-6">
          <div className="py-5 sm:p-6 px-[15px] flex flex-col gap-y-3 text-sm md:text-base font-normal">
            <fieldset>
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Card Details
              </legend>
              <div className="mt-2 -space-y-px rounded-md bg-white shadow-sm">
                <div>
                  <label htmlFor="cardNumber" className="sr-only">
                    Card number
                  </label>
                  <input
                    pattern="[0-9\s]{13,19}"
                    type="numeric"
                    name="cardNumber"
                    id="cardNumber"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Card number"
                    value={inputCardValues.cardNumber}
                    onChange={handleCardChange}
                  />
                </div>
                <div>
                  <label htmlFor="cardHolder" className="sr-only">
                    Cardholder Name
                  </label>
                  <input
                    type="text"
                    name="cardHolder"
                    id="cardHolder"
                    className="relative block w-full rounded-none  border-0 bg-transparent py-1.5 px-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="Cardholder Name"
                    value={inputCardValues.cardHolder}
                    onChange={handleCardChange}
                  />
                </div>
                <div className="flex -space-x-px">
                  <div className="w-1/2 min-w-0 flex-1">
                    <label htmlFor="cardExpirationDate" className="sr-only">
                      Expiration date
                    </label>
                    <input
                      required
                      type="text"
                      name="cardExpirationDate"
                      id="cardExpirationDate"
                      className="relative px-1.5 block w-full rounded-none rounded-bl-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="MM / YY"
                      value={inputCardValues.cardExpirationDate}
                      onChange={handleCardChange}
                    />
                  </div>
                  <div className="min-w-0 flex-1">
                    <label htmlFor="cardCvc" className="sr-only">
                      CVC
                    </label>
                    <input
                      type="text"
                      name="cardCvc"
                      id="cardCvc"
                      className="relative px-1.5 block w-full rounded-none rounded-br-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      placeholder="CVC"
                      value={inputCardValues.cardCvc}
                      onChange={handleCardChange}
                    />
                  </div>
                </div>
              </div>
            </fieldset>
            <fieldset className="mt-6 bg-white">
              <legend className="block text-sm font-medium leading-6 text-gray-900">
                Billing address
              </legend>
              <div className="mt-2 -space-y-px rounded-md shadow-sm">
                <div>
                  <label htmlFor="country" className="sr-only">
                    Country
                  </label>
                  <select
                    id="country"
                    name="country"
                    autoComplete="country-name"
                    className="relative block w-full rounded-none rounded-t-md border-0 bg-transparent py-1.5 px-1.5 text-gray-900   focus:z-10   sm:text-sm sm:leading-6"
                  >
                    <option>United States</option>
                    <option>Canada</option>
                    <option>Mexico</option>
                  </select>
                </div>
                <div>
                  <label htmlFor="postal-code" className="sr-only">
                    ZIP / Postal code
                  </label>
                  <input
                    type="text"
                    name="postal-code"
                    id="postal-code"
                    autoComplete="postal-code"
                    className="relative px-2.5 block w-full rounded-none rounded-b-md border-0 bg-transparent py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                    placeholder="ZIP / Postal code"
                    value={zipCode}
                    onChange={handleZipCodeChange}
                  />
                </div>
              </div>
            </fieldset>
            <div className="flex justify-end gap-x-2 mt-3">
              <button
                className="rounded-md bg-white px-3 py-1.5 text-gray-900 text-sm font-normal shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={handleCardCancel}
              >
                Cancel
              </button>

              <button
                className="rounded-md bg-[#22C55E] px-3 py-1.5 text-[#FFFFFF] md:text-sm sm:text-xs font-normal hover:bg-[#22C55E]"
                onClick={handleCardSaveClick}
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyPayment;


